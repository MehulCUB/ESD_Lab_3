                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_size
                                     12 	.globl _main
                                     13 	.globl _dataout
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _printf_tiny
                                     17 	.globl _printf
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _F1
                                     25 	.globl _P
                                     26 	.globl _PS
                                     27 	.globl _PT1
                                     28 	.globl _PX1
                                     29 	.globl _PT0
                                     30 	.globl _PX0
                                     31 	.globl _RD
                                     32 	.globl _WR
                                     33 	.globl _T1
                                     34 	.globl _T0
                                     35 	.globl _INT1
                                     36 	.globl _INT0
                                     37 	.globl _TXD
                                     38 	.globl _RXD
                                     39 	.globl _P3_7
                                     40 	.globl _P3_6
                                     41 	.globl _P3_5
                                     42 	.globl _P3_4
                                     43 	.globl _P3_3
                                     44 	.globl _P3_2
                                     45 	.globl _P3_1
                                     46 	.globl _P3_0
                                     47 	.globl _EA
                                     48 	.globl _ES
                                     49 	.globl _ET1
                                     50 	.globl _EX1
                                     51 	.globl _ET0
                                     52 	.globl _EX0
                                     53 	.globl _P2_7
                                     54 	.globl _P2_6
                                     55 	.globl _P2_5
                                     56 	.globl _P2_4
                                     57 	.globl _P2_3
                                     58 	.globl _P2_2
                                     59 	.globl _P2_1
                                     60 	.globl _P2_0
                                     61 	.globl _SM0
                                     62 	.globl _SM1
                                     63 	.globl _SM2
                                     64 	.globl _REN
                                     65 	.globl _TB8
                                     66 	.globl _RB8
                                     67 	.globl _TI
                                     68 	.globl _RI
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _TF1
                                     78 	.globl _TR1
                                     79 	.globl _TF0
                                     80 	.globl _TR0
                                     81 	.globl _IE1
                                     82 	.globl _IT1
                                     83 	.globl _IE0
                                     84 	.globl _IT0
                                     85 	.globl _P0_7
                                     86 	.globl _P0_6
                                     87 	.globl _P0_5
                                     88 	.globl _P0_4
                                     89 	.globl _P0_3
                                     90 	.globl _P0_2
                                     91 	.globl _P0_1
                                     92 	.globl _P0_0
                                     93 	.globl _TXD0
                                     94 	.globl _RXD0
                                     95 	.globl _BREG_F7
                                     96 	.globl _BREG_F6
                                     97 	.globl _BREG_F5
                                     98 	.globl _BREG_F4
                                     99 	.globl _BREG_F3
                                    100 	.globl _BREG_F2
                                    101 	.globl _BREG_F1
                                    102 	.globl _BREG_F0
                                    103 	.globl _P5_7
                                    104 	.globl _P5_6
                                    105 	.globl _P5_5
                                    106 	.globl _P5_4
                                    107 	.globl _P5_3
                                    108 	.globl _P5_2
                                    109 	.globl _P5_1
                                    110 	.globl _P5_0
                                    111 	.globl _P4_7
                                    112 	.globl _P4_6
                                    113 	.globl _P4_5
                                    114 	.globl _P4_4
                                    115 	.globl _P4_3
                                    116 	.globl _P4_2
                                    117 	.globl _P4_1
                                    118 	.globl _P4_0
                                    119 	.globl _PX0L
                                    120 	.globl _PT0L
                                    121 	.globl _PX1L
                                    122 	.globl _PT1L
                                    123 	.globl _PSL
                                    124 	.globl _PT2L
                                    125 	.globl _PPCL
                                    126 	.globl _EC
                                    127 	.globl _CCF0
                                    128 	.globl _CCF1
                                    129 	.globl _CCF2
                                    130 	.globl _CCF3
                                    131 	.globl _CCF4
                                    132 	.globl _CR
                                    133 	.globl _CF
                                    134 	.globl _TF2
                                    135 	.globl _EXF2
                                    136 	.globl _RCLK
                                    137 	.globl _TCLK
                                    138 	.globl _EXEN2
                                    139 	.globl _TR2
                                    140 	.globl _C_T2
                                    141 	.globl _CP_RL2
                                    142 	.globl _T2CON_7
                                    143 	.globl _T2CON_6
                                    144 	.globl _T2CON_5
                                    145 	.globl _T2CON_4
                                    146 	.globl _T2CON_3
                                    147 	.globl _T2CON_2
                                    148 	.globl _T2CON_1
                                    149 	.globl _T2CON_0
                                    150 	.globl _PT2
                                    151 	.globl _ET2
                                    152 	.globl _B
                                    153 	.globl _ACC
                                    154 	.globl _PSW
                                    155 	.globl _IP
                                    156 	.globl _P3
                                    157 	.globl _IE
                                    158 	.globl _P2
                                    159 	.globl _SBUF
                                    160 	.globl _SCON
                                    161 	.globl _P1
                                    162 	.globl _TH1
                                    163 	.globl _TH0
                                    164 	.globl _TL1
                                    165 	.globl _TL0
                                    166 	.globl _TMOD
                                    167 	.globl _TCON
                                    168 	.globl _PCON
                                    169 	.globl _DPH
                                    170 	.globl _DPL
                                    171 	.globl _SP
                                    172 	.globl _P0
                                    173 	.globl _SBUF0
                                    174 	.globl _DP0L
                                    175 	.globl _DP0H
                                    176 	.globl _EECON
                                    177 	.globl _KBF
                                    178 	.globl _KBE
                                    179 	.globl _KBLS
                                    180 	.globl _BRL
                                    181 	.globl _BDRCON
                                    182 	.globl _T2MOD
                                    183 	.globl _SPDAT
                                    184 	.globl _SPSTA
                                    185 	.globl _SPCON
                                    186 	.globl _SADEN
                                    187 	.globl _SADDR
                                    188 	.globl _WDTPRG
                                    189 	.globl _WDTRST
                                    190 	.globl _P5
                                    191 	.globl _P4
                                    192 	.globl _IPH1
                                    193 	.globl _IPL1
                                    194 	.globl _IPH0
                                    195 	.globl _IPL0
                                    196 	.globl _IEN1
                                    197 	.globl _IEN0
                                    198 	.globl _CMOD
                                    199 	.globl _CL
                                    200 	.globl _CH
                                    201 	.globl _CCON
                                    202 	.globl _CCAPM4
                                    203 	.globl _CCAPM3
                                    204 	.globl _CCAPM2
                                    205 	.globl _CCAPM1
                                    206 	.globl _CCAPM0
                                    207 	.globl _CCAP4L
                                    208 	.globl _CCAP3L
                                    209 	.globl _CCAP2L
                                    210 	.globl _CCAP1L
                                    211 	.globl _CCAP0L
                                    212 	.globl _CCAP4H
                                    213 	.globl _CCAP3H
                                    214 	.globl _CCAP2H
                                    215 	.globl _CCAP1H
                                    216 	.globl _CCAP0H
                                    217 	.globl _CKCON1
                                    218 	.globl _CKCON0
                                    219 	.globl _CKRL
                                    220 	.globl _AUXR1
                                    221 	.globl _AUXR
                                    222 	.globl _TH2
                                    223 	.globl _TL2
                                    224 	.globl _RCAP2H
                                    225 	.globl _RCAP2L
                                    226 	.globl _T2CON
                                    227 	.globl _ptr
                                    228 	.globl _buff1_size
                                    229 	.globl ___sdcc_heap
                                    230 	.globl _getchar
                                    231 	.globl _putchar
                                    232 	.globl _get_num
                                    233 ;--------------------------------------------------------
                                    234 ; special function registers
                                    235 ;--------------------------------------------------------
                                    236 	.area RSEG    (ABS,DATA)
      000000                        237 	.org 0x0000
                           0000C8   238 _T2CON	=	0x00c8
                           0000CA   239 _RCAP2L	=	0x00ca
                           0000CB   240 _RCAP2H	=	0x00cb
                           0000CC   241 _TL2	=	0x00cc
                           0000CD   242 _TH2	=	0x00cd
                           00008E   243 _AUXR	=	0x008e
                           0000A2   244 _AUXR1	=	0x00a2
                           000097   245 _CKRL	=	0x0097
                           00008F   246 _CKCON0	=	0x008f
                           0000AF   247 _CKCON1	=	0x00af
                           0000FA   248 _CCAP0H	=	0x00fa
                           0000FB   249 _CCAP1H	=	0x00fb
                           0000FC   250 _CCAP2H	=	0x00fc
                           0000FD   251 _CCAP3H	=	0x00fd
                           0000FE   252 _CCAP4H	=	0x00fe
                           0000EA   253 _CCAP0L	=	0x00ea
                           0000EB   254 _CCAP1L	=	0x00eb
                           0000EC   255 _CCAP2L	=	0x00ec
                           0000ED   256 _CCAP3L	=	0x00ed
                           0000EE   257 _CCAP4L	=	0x00ee
                           0000DA   258 _CCAPM0	=	0x00da
                           0000DB   259 _CCAPM1	=	0x00db
                           0000DC   260 _CCAPM2	=	0x00dc
                           0000DD   261 _CCAPM3	=	0x00dd
                           0000DE   262 _CCAPM4	=	0x00de
                           0000D8   263 _CCON	=	0x00d8
                           0000F9   264 _CH	=	0x00f9
                           0000E9   265 _CL	=	0x00e9
                           0000D9   266 _CMOD	=	0x00d9
                           0000A8   267 _IEN0	=	0x00a8
                           0000B1   268 _IEN1	=	0x00b1
                           0000B8   269 _IPL0	=	0x00b8
                           0000B7   270 _IPH0	=	0x00b7
                           0000B2   271 _IPL1	=	0x00b2
                           0000B3   272 _IPH1	=	0x00b3
                           0000C0   273 _P4	=	0x00c0
                           0000E8   274 _P5	=	0x00e8
                           0000A6   275 _WDTRST	=	0x00a6
                           0000A7   276 _WDTPRG	=	0x00a7
                           0000A9   277 _SADDR	=	0x00a9
                           0000B9   278 _SADEN	=	0x00b9
                           0000C3   279 _SPCON	=	0x00c3
                           0000C4   280 _SPSTA	=	0x00c4
                           0000C5   281 _SPDAT	=	0x00c5
                           0000C9   282 _T2MOD	=	0x00c9
                           00009B   283 _BDRCON	=	0x009b
                           00009A   284 _BRL	=	0x009a
                           00009C   285 _KBLS	=	0x009c
                           00009D   286 _KBE	=	0x009d
                           00009E   287 _KBF	=	0x009e
                           0000D2   288 _EECON	=	0x00d2
                           000083   289 _DP0H	=	0x0083
                           000082   290 _DP0L	=	0x0082
                           000099   291 _SBUF0	=	0x0099
                           000080   292 _P0	=	0x0080
                           000081   293 _SP	=	0x0081
                           000082   294 _DPL	=	0x0082
                           000083   295 _DPH	=	0x0083
                           000087   296 _PCON	=	0x0087
                           000088   297 _TCON	=	0x0088
                           000089   298 _TMOD	=	0x0089
                           00008A   299 _TL0	=	0x008a
                           00008B   300 _TL1	=	0x008b
                           00008C   301 _TH0	=	0x008c
                           00008D   302 _TH1	=	0x008d
                           000090   303 _P1	=	0x0090
                           000098   304 _SCON	=	0x0098
                           000099   305 _SBUF	=	0x0099
                           0000A0   306 _P2	=	0x00a0
                           0000A8   307 _IE	=	0x00a8
                           0000B0   308 _P3	=	0x00b0
                           0000B8   309 _IP	=	0x00b8
                           0000D0   310 _PSW	=	0x00d0
                           0000E0   311 _ACC	=	0x00e0
                           0000F0   312 _B	=	0x00f0
                                    313 ;--------------------------------------------------------
                                    314 ; special function bits
                                    315 ;--------------------------------------------------------
                                    316 	.area RSEG    (ABS,DATA)
      000000                        317 	.org 0x0000
                           0000AD   318 _ET2	=	0x00ad
                           0000BD   319 _PT2	=	0x00bd
                           0000C8   320 _T2CON_0	=	0x00c8
                           0000C9   321 _T2CON_1	=	0x00c9
                           0000CA   322 _T2CON_2	=	0x00ca
                           0000CB   323 _T2CON_3	=	0x00cb
                           0000CC   324 _T2CON_4	=	0x00cc
                           0000CD   325 _T2CON_5	=	0x00cd
                           0000CE   326 _T2CON_6	=	0x00ce
                           0000CF   327 _T2CON_7	=	0x00cf
                           0000C8   328 _CP_RL2	=	0x00c8
                           0000C9   329 _C_T2	=	0x00c9
                           0000CA   330 _TR2	=	0x00ca
                           0000CB   331 _EXEN2	=	0x00cb
                           0000CC   332 _TCLK	=	0x00cc
                           0000CD   333 _RCLK	=	0x00cd
                           0000CE   334 _EXF2	=	0x00ce
                           0000CF   335 _TF2	=	0x00cf
                           0000DF   336 _CF	=	0x00df
                           0000DE   337 _CR	=	0x00de
                           0000DC   338 _CCF4	=	0x00dc
                           0000DB   339 _CCF3	=	0x00db
                           0000DA   340 _CCF2	=	0x00da
                           0000D9   341 _CCF1	=	0x00d9
                           0000D8   342 _CCF0	=	0x00d8
                           0000AE   343 _EC	=	0x00ae
                           0000BE   344 _PPCL	=	0x00be
                           0000BD   345 _PT2L	=	0x00bd
                           0000BC   346 _PSL	=	0x00bc
                           0000BB   347 _PT1L	=	0x00bb
                           0000BA   348 _PX1L	=	0x00ba
                           0000B9   349 _PT0L	=	0x00b9
                           0000B8   350 _PX0L	=	0x00b8
                           0000C0   351 _P4_0	=	0x00c0
                           0000C1   352 _P4_1	=	0x00c1
                           0000C2   353 _P4_2	=	0x00c2
                           0000C3   354 _P4_3	=	0x00c3
                           0000C4   355 _P4_4	=	0x00c4
                           0000C5   356 _P4_5	=	0x00c5
                           0000C6   357 _P4_6	=	0x00c6
                           0000C7   358 _P4_7	=	0x00c7
                           0000E8   359 _P5_0	=	0x00e8
                           0000E9   360 _P5_1	=	0x00e9
                           0000EA   361 _P5_2	=	0x00ea
                           0000EB   362 _P5_3	=	0x00eb
                           0000EC   363 _P5_4	=	0x00ec
                           0000ED   364 _P5_5	=	0x00ed
                           0000EE   365 _P5_6	=	0x00ee
                           0000EF   366 _P5_7	=	0x00ef
                           0000F0   367 _BREG_F0	=	0x00f0
                           0000F1   368 _BREG_F1	=	0x00f1
                           0000F2   369 _BREG_F2	=	0x00f2
                           0000F3   370 _BREG_F3	=	0x00f3
                           0000F4   371 _BREG_F4	=	0x00f4
                           0000F5   372 _BREG_F5	=	0x00f5
                           0000F6   373 _BREG_F6	=	0x00f6
                           0000F7   374 _BREG_F7	=	0x00f7
                           0000B0   375 _RXD0	=	0x00b0
                           0000B1   376 _TXD0	=	0x00b1
                           000080   377 _P0_0	=	0x0080
                           000081   378 _P0_1	=	0x0081
                           000082   379 _P0_2	=	0x0082
                           000083   380 _P0_3	=	0x0083
                           000084   381 _P0_4	=	0x0084
                           000085   382 _P0_5	=	0x0085
                           000086   383 _P0_6	=	0x0086
                           000087   384 _P0_7	=	0x0087
                           000088   385 _IT0	=	0x0088
                           000089   386 _IE0	=	0x0089
                           00008A   387 _IT1	=	0x008a
                           00008B   388 _IE1	=	0x008b
                           00008C   389 _TR0	=	0x008c
                           00008D   390 _TF0	=	0x008d
                           00008E   391 _TR1	=	0x008e
                           00008F   392 _TF1	=	0x008f
                           000090   393 _P1_0	=	0x0090
                           000091   394 _P1_1	=	0x0091
                           000092   395 _P1_2	=	0x0092
                           000093   396 _P1_3	=	0x0093
                           000094   397 _P1_4	=	0x0094
                           000095   398 _P1_5	=	0x0095
                           000096   399 _P1_6	=	0x0096
                           000097   400 _P1_7	=	0x0097
                           000098   401 _RI	=	0x0098
                           000099   402 _TI	=	0x0099
                           00009A   403 _RB8	=	0x009a
                           00009B   404 _TB8	=	0x009b
                           00009C   405 _REN	=	0x009c
                           00009D   406 _SM2	=	0x009d
                           00009E   407 _SM1	=	0x009e
                           00009F   408 _SM0	=	0x009f
                           0000A0   409 _P2_0	=	0x00a0
                           0000A1   410 _P2_1	=	0x00a1
                           0000A2   411 _P2_2	=	0x00a2
                           0000A3   412 _P2_3	=	0x00a3
                           0000A4   413 _P2_4	=	0x00a4
                           0000A5   414 _P2_5	=	0x00a5
                           0000A6   415 _P2_6	=	0x00a6
                           0000A7   416 _P2_7	=	0x00a7
                           0000A8   417 _EX0	=	0x00a8
                           0000A9   418 _ET0	=	0x00a9
                           0000AA   419 _EX1	=	0x00aa
                           0000AB   420 _ET1	=	0x00ab
                           0000AC   421 _ES	=	0x00ac
                           0000AF   422 _EA	=	0x00af
                           0000B0   423 _P3_0	=	0x00b0
                           0000B1   424 _P3_1	=	0x00b1
                           0000B2   425 _P3_2	=	0x00b2
                           0000B3   426 _P3_3	=	0x00b3
                           0000B4   427 _P3_4	=	0x00b4
                           0000B5   428 _P3_5	=	0x00b5
                           0000B6   429 _P3_6	=	0x00b6
                           0000B7   430 _P3_7	=	0x00b7
                           0000B0   431 _RXD	=	0x00b0
                           0000B1   432 _TXD	=	0x00b1
                           0000B2   433 _INT0	=	0x00b2
                           0000B3   434 _INT1	=	0x00b3
                           0000B4   435 _T0	=	0x00b4
                           0000B5   436 _T1	=	0x00b5
                           0000B6   437 _WR	=	0x00b6
                           0000B7   438 _RD	=	0x00b7
                           0000B8   439 _PX0	=	0x00b8
                           0000B9   440 _PT0	=	0x00b9
                           0000BA   441 _PX1	=	0x00ba
                           0000BB   442 _PT1	=	0x00bb
                           0000BC   443 _PS	=	0x00bc
                           0000D0   444 _P	=	0x00d0
                           0000D1   445 _F1	=	0x00d1
                           0000D2   446 _OV	=	0x00d2
                           0000D3   447 _RS0	=	0x00d3
                           0000D4   448 _RS1	=	0x00d4
                           0000D5   449 _F0	=	0x00d5
                           0000D6   450 _AC	=	0x00d6
                           0000D7   451 _CY	=	0x00d7
                                    452 ;--------------------------------------------------------
                                    453 ; overlayable register banks
                                    454 ;--------------------------------------------------------
                                    455 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        456 	.ds 8
                                    457 ;--------------------------------------------------------
                                    458 ; internal ram data
                                    459 ;--------------------------------------------------------
                                    460 	.area DSEG    (DATA)
      000000                        461 _main_sloc0_1_0:
      000000                        462 	.ds 3
      000003                        463 _main_sloc1_1_0:
      000003                        464 	.ds 2
      000005                        465 _main_sloc2_1_0:
      000005                        466 	.ds 2
      000007                        467 _main_sloc3_1_0:
      000007                        468 	.ds 2
      000009                        469 _main_sloc4_1_0:
      000009                        470 	.ds 2
                                    471 ;--------------------------------------------------------
                                    472 ; overlayable items in internal ram 
                                    473 ;--------------------------------------------------------
                                    474 ;--------------------------------------------------------
                                    475 ; Stack segment in internal ram 
                                    476 ;--------------------------------------------------------
                                    477 	.area	SSEG
      000000                        478 __start__stack:
      000000                        479 	.ds	1
                                    480 
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 ___sdcc_heap::
      000000                        503 	.ds 5000
      001388                        504 _buff1_size::
      001388                        505 	.ds 2
      00138A                        506 _dataout_data_65536_63:
      00138A                        507 	.ds 1
      00138B                        508 _putchar_b_65536_67:
      00138B                        509 	.ds 2
      00138D                        510 _get_num_num_65536_71:
      00138D                        511 	.ds 2
      00138F                        512 _main_buff_65536_76:
      00138F                        513 	.ds 90
      0013E9                        514 _main_start_addr_65536_76:
      0013E9                        515 	.ds 60
      001425                        516 _main_end_addr_65536_76:
      001425                        517 	.ds 60
      001461                        518 _main_b_size_65536_76:
      001461                        519 	.ds 60
      00149D                        520 _main_n_storedC_65536_76:
      00149D                        521 	.ds 60
      0014D9                        522 _main_n_Fspace_65536_76:
      0014D9                        523 	.ds 60
      001515                        524 _main_n_buff_65536_76:
      001515                        525 	.ds 2
      001517                        526 _main_nstored_bytes_65536_76:
      001517                        527 	.ds 2
      001519                        528 _main_n_rbytes_after_q_65536_76:
      001519                        529 	.ds 2
                                    530 ;--------------------------------------------------------
                                    531 ; absolute external ram data
                                    532 ;--------------------------------------------------------
                                    533 	.area XABS    (ABS,XDATA)
                                    534 ;--------------------------------------------------------
                                    535 ; external initialized ram data
                                    536 ;--------------------------------------------------------
                                    537 	.area XISEG   (XDATA)
      000000                        538 _ptr::
      000000                        539 	.ds 2
                                    540 	.area HOME    (CODE)
                                    541 	.area GSINIT0 (CODE)
                                    542 	.area GSINIT1 (CODE)
                                    543 	.area GSINIT2 (CODE)
                                    544 	.area GSINIT3 (CODE)
                                    545 	.area GSINIT4 (CODE)
                                    546 	.area GSINIT5 (CODE)
                                    547 	.area GSINIT  (CODE)
                                    548 	.area GSFINAL (CODE)
                                    549 	.area CSEG    (CODE)
                                    550 ;--------------------------------------------------------
                                    551 ; interrupt vector 
                                    552 ;--------------------------------------------------------
                                    553 	.area HOME    (CODE)
      000000                        554 __interrupt_vect:
      000000 02r00r00         [24]  555 	ljmp	__sdcc_gsinit_startup
                                    556 ;--------------------------------------------------------
                                    557 ; global & static initialisations
                                    558 ;--------------------------------------------------------
                                    559 	.area HOME    (CODE)
                                    560 	.area GSINIT  (CODE)
                                    561 	.area GSFINAL (CODE)
                                    562 	.area GSINIT  (CODE)
                                    563 	.globl __sdcc_gsinit_startup
                                    564 	.globl __sdcc_program_startup
                                    565 	.globl __start__stack
                                    566 	.globl __mcs51_genXINIT
                                    567 	.globl __mcs51_genXRAMCLEAR
                                    568 	.globl __mcs51_genRAMCLEAR
                                    569 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  570 	ljmp	__sdcc_program_startup
                                    571 ;--------------------------------------------------------
                                    572 ; Home
                                    573 ;--------------------------------------------------------
                                    574 	.area HOME    (CODE)
                                    575 	.area HOME    (CODE)
      000003                        576 __sdcc_program_startup:
      000003 02r00rCD         [24]  577 	ljmp	_main
                                    578 ;	return from main will return to caller
                                    579 ;--------------------------------------------------------
                                    580 ; code
                                    581 ;--------------------------------------------------------
                                    582 	.area CSEG    (CODE)
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'dataout'
                                    585 ;------------------------------------------------------------
                                    586 ;data                      Allocated with name '_dataout_data_65536_63'
                                    587 ;ptr                       Allocated with name '_dataout_ptr_65536_64'
                                    588 ;------------------------------------------------------------
                                    589 ;	main.c:53: void dataout(uint8_t data)
                                    590 ;	-----------------------------------------
                                    591 ;	 function dataout
                                    592 ;	-----------------------------------------
      000000                        593 _dataout:
                           000007   594 	ar7 = 0x07
                           000006   595 	ar6 = 0x06
                           000005   596 	ar5 = 0x05
                           000004   597 	ar4 = 0x04
                           000003   598 	ar3 = 0x03
                           000002   599 	ar2 = 0x02
                           000001   600 	ar1 = 0x01
                           000000   601 	ar0 = 0x00
      000000 E5 82            [12]  602 	mov	a,dpl
      000002 90r13r8A         [24]  603 	mov	dptr,#_dataout_data_65536_63
      000005 F0               [24]  604 	movx	@dptr,a
                                    605 ;	main.c:57: * ptr = (data);      //write data
      000006 E0               [24]  606 	movx	a,@dptr
      000007 FF               [12]  607 	mov	r7,a
      000008 90 80 00         [24]  608 	mov	dptr,#0x8000
      00000B 75 F0 00         [24]  609 	mov	b,#0x00
      00000E EF               [12]  610 	mov	a,r7
                                    611 ;	main.c:58: }
      00000F 02r00r00         [24]  612 	ljmp	__gptrput
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'getchar'
                                    615 ;------------------------------------------------------------
                                    616 ;x                         Allocated with name '_getchar_x_65536_65'
                                    617 ;------------------------------------------------------------
                                    618 ;	main.c:65: int getchar()
                                    619 ;	-----------------------------------------
                                    620 ;	 function getchar
                                    621 ;	-----------------------------------------
      000012                        622 _getchar:
                                    623 ;	main.c:68: while (!RI)
      000012                        624 00101$:
                                    625 ;	main.c:72: RI = 0;
                                    626 ;	assignBit
      000012 10 98 02         [24]  627 	jbc	_RI,00114$
      000015 80 FB            [24]  628 	sjmp	00101$
      000017                        629 00114$:
                                    630 ;	main.c:73: x = SBUF;
      000017 AE 99            [24]  631 	mov	r6,_SBUF
      000019 7F 00            [12]  632 	mov	r7,#0x00
                                    633 ;	main.c:74: return x;
      00001B 8E 82            [24]  634 	mov	dpl,r6
      00001D 8F 83            [24]  635 	mov	dph,r7
                                    636 ;	main.c:75: }
      00001F 22               [24]  637 	ret
                                    638 ;------------------------------------------------------------
                                    639 ;Allocation info for local variables in function 'putchar'
                                    640 ;------------------------------------------------------------
                                    641 ;b                         Allocated with name '_putchar_b_65536_67'
                                    642 ;------------------------------------------------------------
                                    643 ;	main.c:81: int putchar(int b)
                                    644 ;	-----------------------------------------
                                    645 ;	 function putchar
                                    646 ;	-----------------------------------------
      000020                        647 _putchar:
      000020 AF 83            [24]  648 	mov	r7,dph
      000022 E5 82            [12]  649 	mov	a,dpl
      000024 90r13r8B         [24]  650 	mov	dptr,#_putchar_b_65536_67
      000027 F0               [24]  651 	movx	@dptr,a
      000028 EF               [12]  652 	mov	a,r7
      000029 A3               [24]  653 	inc	dptr
      00002A F0               [24]  654 	movx	@dptr,a
                                    655 ;	main.c:83: while (!TI)
      00002B                        656 00101$:
                                    657 ;	main.c:87: TI = 0;
                                    658 ;	assignBit
      00002B 10 99 02         [24]  659 	jbc	_TI,00114$
      00002E 80 FB            [24]  660 	sjmp	00101$
      000030                        661 00114$:
                                    662 ;	main.c:88: SBUF = b;
      000030 90r13r8B         [24]  663 	mov	dptr,#_putchar_b_65536_67
      000033 E0               [24]  664 	movx	a,@dptr
      000034 FE               [12]  665 	mov	r6,a
      000035 A3               [24]  666 	inc	dptr
      000036 E0               [24]  667 	movx	a,@dptr
      000037 8E 99            [24]  668 	mov	_SBUF,r6
                                    669 ;	main.c:89: return 0;
      000039 90 00 00         [24]  670 	mov	dptr,#0x0000
                                    671 ;	main.c:90: }
      00003C 22               [24]  672 	ret
                                    673 ;------------------------------------------------------------
                                    674 ;Allocation info for local variables in function 'get_num'
                                    675 ;------------------------------------------------------------
                                    676 ;digit                     Allocated with name '_get_num_digit_65536_71'
                                    677 ;num                       Allocated with name '_get_num_num_65536_71'
                                    678 ;i                         Allocated with name '_get_num_i_65536_71'
                                    679 ;------------------------------------------------------------
                                    680 ;	main.c:97: int get_num(void)
                                    681 ;	-----------------------------------------
                                    682 ;	 function get_num
                                    683 ;	-----------------------------------------
      00003D                        684 _get_num:
                                    685 ;	main.c:100: uint16_t num = 0; //output number
      00003D 90r13r8D         [24]  686 	mov	dptr,#_get_num_num_65536_71
      000040 E4               [12]  687 	clr	a
      000041 F0               [24]  688 	movx	@dptr,a
      000042 A3               [24]  689 	inc	dptr
      000043 F0               [24]  690 	movx	@dptr,a
                                    691 ;	main.c:102: do
      000044 7E 00            [12]  692 	mov	r6,#0x00
      000046 7F 00            [12]  693 	mov	r7,#0x00
      000048                        694 00105$:
                                    695 ;	main.c:104: digit = getchar();     //get ascii input
      000048 C0 07            [24]  696 	push	ar7
      00004A C0 06            [24]  697 	push	ar6
      00004C 12r00r12         [24]  698 	lcall	_getchar
      00004F AC 82            [24]  699 	mov	r4,dpl
      000051 AD 83            [24]  700 	mov	r5,dph
      000053 D0 06            [24]  701 	pop	ar6
      000055 D0 07            [24]  702 	pop	ar7
                                    703 ;	main.c:106: if (digit >= '0' && digit <= '9')
      000057 8C 02            [24]  704 	mov	ar2,r4
      000059 8D 03            [24]  705 	mov	ar3,r5
      00005B C3               [12]  706 	clr	c
      00005C EA               [12]  707 	mov	a,r2
      00005D 94 30            [12]  708 	subb	a,#0x30
      00005F EB               [12]  709 	mov	a,r3
      000060 94 00            [12]  710 	subb	a,#0x00
      000062 40 5D            [24]  711 	jc	00107$
      000064 8C 02            [24]  712 	mov	ar2,r4
      000066 8D 03            [24]  713 	mov	ar3,r5
      000068 C3               [12]  714 	clr	c
      000069 74 39            [12]  715 	mov	a,#0x39
      00006B 9A               [12]  716 	subb	a,r2
      00006C E4               [12]  717 	clr	a
      00006D 9B               [12]  718 	subb	a,r3
      00006E 40 51            [24]  719 	jc	00107$
                                    720 ;	main.c:108: num = (num* 10) + (digit - '0');
      000070 90r13r8D         [24]  721 	mov	dptr,#_get_num_num_65536_71
      000073 E0               [24]  722 	movx	a,@dptr
      000074 FA               [12]  723 	mov	r2,a
      000075 A3               [24]  724 	inc	dptr
      000076 E0               [24]  725 	movx	a,@dptr
      000077 FB               [12]  726 	mov	r3,a
      000078 90r00r00         [24]  727 	mov	dptr,#__mulint_PARM_2
      00007B EA               [12]  728 	mov	a,r2
      00007C F0               [24]  729 	movx	@dptr,a
      00007D EB               [12]  730 	mov	a,r3
      00007E A3               [24]  731 	inc	dptr
      00007F F0               [24]  732 	movx	@dptr,a
      000080 90 00 0A         [24]  733 	mov	dptr,#0x000a
      000083 C0 07            [24]  734 	push	ar7
      000085 C0 06            [24]  735 	push	ar6
      000087 C0 05            [24]  736 	push	ar5
      000089 C0 04            [24]  737 	push	ar4
      00008B 12r00r00         [24]  738 	lcall	__mulint
      00008E AA 82            [24]  739 	mov	r2,dpl
      000090 AB 83            [24]  740 	mov	r3,dph
      000092 D0 04            [24]  741 	pop	ar4
      000094 D0 05            [24]  742 	pop	ar5
      000096 EC               [12]  743 	mov	a,r4
      000097 24 D0            [12]  744 	add	a,#0xd0
      000099 F8               [12]  745 	mov	r0,a
      00009A ED               [12]  746 	mov	a,r5
      00009B 34 FF            [12]  747 	addc	a,#0xff
      00009D F9               [12]  748 	mov	r1,a
      00009E 90r13r8D         [24]  749 	mov	dptr,#_get_num_num_65536_71
      0000A1 E8               [12]  750 	mov	a,r0
      0000A2 2A               [12]  751 	add	a,r2
      0000A3 F0               [24]  752 	movx	@dptr,a
      0000A4 E9               [12]  753 	mov	a,r1
      0000A5 3B               [12]  754 	addc	a,r3
      0000A6 A3               [24]  755 	inc	dptr
      0000A7 F0               [24]  756 	movx	@dptr,a
                                    757 ;	main.c:114: putchar(digit); //
      0000A8 8C 82            [24]  758 	mov	dpl,r4
      0000AA 8D 83            [24]  759 	mov	dph,r5
      0000AC 12r00r20         [24]  760 	lcall	_putchar
      0000AF D0 06            [24]  761 	pop	ar6
      0000B1 D0 07            [24]  762 	pop	ar7
                                    763 ;	main.c:115: i++;
      0000B3 0E               [12]  764 	inc	r6
      0000B4 BE 00 01         [24]  765 	cjne	r6,#0x00,00125$
      0000B7 0F               [12]  766 	inc	r7
      0000B8                        767 00125$:
                                    768 ;	main.c:116: }while (i<NDIGIT);
      0000B8 C3               [12]  769 	clr	c
      0000B9 EE               [12]  770 	mov	a,r6
      0000BA 94 04            [12]  771 	subb	a,#0x04
      0000BC EF               [12]  772 	mov	a,r7
      0000BD 94 00            [12]  773 	subb	a,#0x00
      0000BF 40 87            [24]  774 	jc	00105$
      0000C1                        775 00107$:
                                    776 ;	main.c:119: return num;
      0000C1 90r13r8D         [24]  777 	mov	dptr,#_get_num_num_65536_71
      0000C4 E0               [24]  778 	movx	a,@dptr
      0000C5 FE               [12]  779 	mov	r6,a
      0000C6 A3               [24]  780 	inc	dptr
      0000C7 E0               [24]  781 	movx	a,@dptr
                                    782 ;	main.c:120: }
      0000C8 8E 82            [24]  783 	mov	dpl,r6
      0000CA F5 83            [12]  784 	mov	dph,a
      0000CC 22               [24]  785 	ret
                                    786 ;------------------------------------------------------------
                                    787 ;Allocation info for local variables in function 'main'
                                    788 ;------------------------------------------------------------
                                    789 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    790 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    791 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    792 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    793 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    794 ;buff                      Allocated with name '_main_buff_65536_76'
                                    795 ;start_addr                Allocated with name '_main_start_addr_65536_76'
                                    796 ;end_addr                  Allocated with name '_main_end_addr_65536_76'
                                    797 ;b_size                    Allocated with name '_main_b_size_65536_76'
                                    798 ;n_storedC                 Allocated with name '_main_n_storedC_65536_76'
                                    799 ;n_Fspace                  Allocated with name '_main_n_Fspace_65536_76'
                                    800 ;n_buff                    Allocated with name '_main_n_buff_65536_76'
                                    801 ;n_char_ip                 Allocated with name '_main_n_char_ip_65536_76'
                                    802 ;nstored_bytes             Allocated with name '_main_nstored_bytes_65536_76'
                                    803 ;n_rbytes_after_q          Allocated with name '_main_n_rbytes_after_q_65536_76'
                                    804 ;m_size                    Allocated with name '_main_m_size_196609_79'
                                    805 ;r_ch                      Allocated with name '_main_r_ch_196609_88'
                                    806 ;bsize                     Allocated with name '_main_bsize_327682_93'
                                    807 ;buff_number               Allocated with name '_main_buff_number_327683_95'
                                    808 ;i                         Allocated with name '_main_i_327684_98'
                                    809 ;j                         Allocated with name '_main_j_327684_98'
                                    810 ;k                         Allocated with name '_main_k_327685_107'
                                    811 ;p                         Allocated with name '_main_p_327686_111'
                                    812 ;------------------------------------------------------------
                                    813 ;	main.c:123: void main(void)
                                    814 ;	-----------------------------------------
                                    815 ;	 function main
                                    816 ;	-----------------------------------------
      0000CD                        817 _main:
                                    818 ;	main.c:142: uint16_t nstored_bytes = 0;         //
      0000CD 90r15r17         [24]  819 	mov	dptr,#_main_nstored_bytes_65536_76
      0000D0 E4               [12]  820 	clr	a
      0000D1 F0               [24]  821 	movx	@dptr,a
      0000D2 A3               [24]  822 	inc	dptr
      0000D3 F0               [24]  823 	movx	@dptr,a
                                    824 ;	main.c:143: uint16_t n_rbytes_after_q = 0;	    //n_bytes_afterqmark
      0000D4 90r15r19         [24]  825 	mov	dptr,#_main_n_rbytes_after_q_65536_76
      0000D7 F0               [24]  826 	movx	@dptr,a
      0000D8 A3               [24]  827 	inc	dptr
      0000D9 F0               [24]  828 	movx	@dptr,a
                                    829 ;	main.c:147: printf_tiny("\n \r  -------------        Welcome        --------------");
      0000DA 74r02            [12]  830 	mov	a,#___str_0
      0000DC C0 E0            [24]  831 	push	acc
      0000DE 74s00            [12]  832 	mov	a,#(___str_0 >> 8)
      0000E0 C0 E0            [24]  833 	push	acc
      0000E2 12r00r00         [24]  834 	lcall	_printf_tiny
      0000E5 15 81            [12]  835 	dec	sp
      0000E7 15 81            [12]  836 	dec	sp
                                    837 ;	main.c:148: printf_tiny("\n \r           Instruction for command and character input:");
      0000E9 74r3A            [12]  838 	mov	a,#___str_1
      0000EB C0 E0            [24]  839 	push	acc
      0000ED 74s00            [12]  840 	mov	a,#(___str_1 >> 8)
      0000EF C0 E0            [24]  841 	push	acc
      0000F1 12r00r00         [24]  842 	lcall	_printf_tiny
      0000F4 15 81            [12]  843 	dec	sp
      0000F6 15 81            [12]  844 	dec	sp
                                    845 ;	main.c:149: printf_tiny("\n \r Enter \n\r:");
      0000F8 74r75            [12]  846 	mov	a,#___str_2
      0000FA C0 E0            [24]  847 	push	acc
      0000FC 74s00            [12]  848 	mov	a,#(___str_2 >> 8)
      0000FE C0 E0            [24]  849 	push	acc
      000100 12r00r00         [24]  850 	lcall	_printf_tiny
      000103 15 81            [12]  851 	dec	sp
      000105 15 81            [12]  852 	dec	sp
                                    853 ;	main.c:150: printf_tiny("\n \r     '+' : to Add a New Buffer:");                        //add new buffer
      000107 74r83            [12]  854 	mov	a,#___str_3
      000109 C0 E0            [24]  855 	push	acc
      00010B 74s00            [12]  856 	mov	a,#(___str_3 >> 8)
      00010D C0 E0            [24]  857 	push	acc
      00010F 12r00r00         [24]  858 	lcall	_printf_tiny
      000112 15 81            [12]  859 	dec	sp
      000114 15 81            [12]  860 	dec	sp
                                    861 ;	main.c:151: printf_tiny("\n \r     '-' : to Clean a Buffer:");                          //clean particular buffer
      000116 74rA6            [12]  862 	mov	a,#___str_4
      000118 C0 E0            [24]  863 	push	acc
      00011A 74s00            [12]  864 	mov	a,#(___str_4 >> 8)
      00011C C0 E0            [24]  865 	push	acc
      00011E 12r00r00         [24]  866 	lcall	_printf_tiny
      000121 15 81            [12]  867 	dec	sp
      000123 15 81            [12]  868 	dec	sp
                                    869 ;	main.c:152: printf_tiny("\n \r     '?' : to Display a Detailed Heap Report:");          //? display heap report
      000125 74rC7            [12]  870 	mov	a,#___str_5
      000127 C0 E0            [24]  871 	push	acc
      000129 74s00            [12]  872 	mov	a,#(___str_5 >> 8)
      00012B C0 E0            [24]  873 	push	acc
      00012D 12r00r00         [24]  874 	lcall	_printf_tiny
      000130 15 81            [12]  875 	dec	sp
      000132 15 81            [12]  876 	dec	sp
                                    877 ;	main.c:153: printf_tiny("\n \r     '@' : to Clear all Buffers Data and Start Again:"); //clear buffers and start again
      000134 74rF8            [12]  878 	mov	a,#___str_6
      000136 C0 E0            [24]  879 	push	acc
      000138 74s00            [12]  880 	mov	a,#(___str_6 >> 8)
      00013A C0 E0            [24]  881 	push	acc
      00013C 12r00r00         [24]  882 	lcall	_printf_tiny
      00013F 15 81            [12]  883 	dec	sp
      000141 15 81            [12]  884 	dec	sp
                                    885 ;	main.c:154: printf_tiny("\n \r     '=' : to Data printing of buffer");
      000143 74r31            [12]  886 	mov	a,#___str_7
      000145 C0 E0            [24]  887 	push	acc
      000147 74s01            [12]  888 	mov	a,#(___str_7 >> 8)
      000149 C0 E0            [24]  889 	push	acc
      00014B 12r00r00         [24]  890 	lcall	_printf_tiny
      00014E 15 81            [12]  891 	dec	sp
      000150 15 81            [12]  892 	dec	sp
                                    893 ;	main.c:155: printf_tiny("\n \r small 'a'-'z' : for char i/p - to Store these Characters in Buffer 0:");
      000152 74r5A            [12]  894 	mov	a,#___str_8
      000154 C0 E0            [24]  895 	push	acc
      000156 74s01            [12]  896 	mov	a,#(___str_8 >> 8)
      000158 C0 E0            [24]  897 	push	acc
      00015A 12r00r00         [24]  898 	lcall	_printf_tiny
      00015D 15 81            [12]  899 	dec	sp
      00015F 15 81            [12]  900 	dec	sp
                                    901 ;	main.c:156: printf_tiny("\r\r -----------------------------------------------------------------------\n\r");
      000161 74rA4            [12]  902 	mov	a,#___str_9
      000163 C0 E0            [24]  903 	push	acc
      000165 74s01            [12]  904 	mov	a,#(___str_9 >> 8)
      000167 C0 E0            [24]  905 	push	acc
      000169 12r00r00         [24]  906 	lcall	_printf_tiny
      00016C 15 81            [12]  907 	dec	sp
      00016E 15 81            [12]  908 	dec	sp
                                    909 ;	main.c:160: while (1)
      000170 7E 00            [12]  910 	mov	r6,#0x00
      000172 7F 00            [12]  911 	mov	r7,#0x00
      000174                        912 00116$:
                                    913 ;	main.c:162: printf("\n\r Enter buffer size for buffer 0 & 1");
      000174 C0 07            [24]  914 	push	ar7
      000176 C0 06            [24]  915 	push	ar6
      000178 74rF1            [12]  916 	mov	a,#___str_10
      00017A C0 E0            [24]  917 	push	acc
      00017C 74s01            [12]  918 	mov	a,#(___str_10 >> 8)
      00017E C0 E0            [24]  919 	push	acc
      000180 74 80            [12]  920 	mov	a,#0x80
      000182 C0 E0            [24]  921 	push	acc
      000184 12r00r00         [24]  922 	lcall	_printf
      000187 15 81            [12]  923 	dec	sp
      000189 15 81            [12]  924 	dec	sp
      00018B 15 81            [12]  925 	dec	sp
                                    926 ;	main.c:163: printf ("\n\r Buffer size must be between [48 - 4800] bytes, & divisible by 16 :");
      00018D 74r17            [12]  927 	mov	a,#___str_11
      00018F C0 E0            [24]  928 	push	acc
      000191 74s02            [12]  929 	mov	a,#(___str_11 >> 8)
      000193 C0 E0            [24]  930 	push	acc
      000195 74 80            [12]  931 	mov	a,#0x80
      000197 C0 E0            [24]  932 	push	acc
      000199 12r00r00         [24]  933 	lcall	_printf
      00019C 15 81            [12]  934 	dec	sp
      00019E 15 81            [12]  935 	dec	sp
      0001A0 15 81            [12]  936 	dec	sp
                                    937 ;	main.c:165: uint16_t m_size = get_num();
      0001A2 12r00r3D         [24]  938 	lcall	_get_num
      0001A5 AC 82            [24]  939 	mov	r4,dpl
      0001A7 AD 83            [24]  940 	mov	r5,dph
      0001A9 D0 06            [24]  941 	pop	ar6
      0001AB D0 07            [24]  942 	pop	ar7
                                    943 ;	main.c:171: if(((m_size >= 48) && (m_size <= 4800)) && ((m_size % 16) == 0))
      0001AD 8C 02            [24]  944 	mov	ar2,r4
      0001AF 8D 03            [24]  945 	mov	ar3,r5
      0001B1 C3               [12]  946 	clr	c
      0001B2 EA               [12]  947 	mov	a,r2
      0001B3 94 30            [12]  948 	subb	a,#0x30
      0001B5 EB               [12]  949 	mov	a,r3
      0001B6 94 00            [12]  950 	subb	a,#0x00
      0001B8 40 42            [24]  951 	jc	00102$
      0001BA 8C 02            [24]  952 	mov	ar2,r4
      0001BC 8D 03            [24]  953 	mov	ar3,r5
      0001BE C3               [12]  954 	clr	c
      0001BF 74 C0            [12]  955 	mov	a,#0xc0
      0001C1 9A               [12]  956 	subb	a,r2
      0001C2 74 12            [12]  957 	mov	a,#0x12
      0001C4 9B               [12]  958 	subb	a,r3
      0001C5 40 35            [24]  959 	jc	00102$
      0001C7 8C 02            [24]  960 	mov	ar2,r4
      0001C9 8D 03            [24]  961 	mov	ar3,r5
      0001CB EA               [12]  962 	mov	a,r2
      0001CC 54 0F            [12]  963 	anl	a,#0x0f
      0001CE 70 2C            [24]  964 	jnz	00102$
                                    965 ;	main.c:173: buff[0] = (uint8_t * ) malloc(m_size);
      0001D0 8C 82            [24]  966 	mov	dpl,r4
      0001D2 8D 83            [24]  967 	mov	dph,r5
      0001D4 C0 07            [24]  968 	push	ar7
      0001D6 C0 06            [24]  969 	push	ar6
      0001D8 C0 05            [24]  970 	push	ar5
      0001DA C0 04            [24]  971 	push	ar4
      0001DC 12r00r00         [24]  972 	lcall	_malloc
      0001DF AA 82            [24]  973 	mov	r2,dpl
      0001E1 AB 83            [24]  974 	mov	r3,dph
      0001E3 D0 04            [24]  975 	pop	ar4
      0001E5 D0 05            [24]  976 	pop	ar5
      0001E7 D0 06            [24]  977 	pop	ar6
      0001E9 D0 07            [24]  978 	pop	ar7
      0001EB 8B 01            [24]  979 	mov	ar1,r3
      0001ED 7B 00            [12]  980 	mov	r3,#0x00
      0001EF 90r13r8F         [24]  981 	mov	dptr,#_main_buff_65536_76
      0001F2 EA               [12]  982 	mov	a,r2
      0001F3 F0               [24]  983 	movx	@dptr,a
      0001F4 E9               [12]  984 	mov	a,r1
      0001F5 A3               [24]  985 	inc	dptr
      0001F6 F0               [24]  986 	movx	@dptr,a
      0001F7 EB               [12]  987 	mov	a,r3
      0001F8 A3               [24]  988 	inc	dptr
      0001F9 F0               [24]  989 	movx	@dptr,a
      0001FA 80 1F            [24]  990 	sjmp	00103$
      0001FC                        991 00102$:
                                    992 ;	main.c:177: printf_tiny("\n \r  Please Enter valid buffer size according to Instruction\n\r");
      0001FC C0 07            [24]  993 	push	ar7
      0001FE C0 06            [24]  994 	push	ar6
      000200 C0 05            [24]  995 	push	ar5
      000202 C0 04            [24]  996 	push	ar4
      000204 74r5D            [12]  997 	mov	a,#___str_12
      000206 C0 E0            [24]  998 	push	acc
      000208 74s02            [12]  999 	mov	a,#(___str_12 >> 8)
      00020A C0 E0            [24] 1000 	push	acc
      00020C 12r00r00         [24] 1001 	lcall	_printf_tiny
      00020F 15 81            [12] 1002 	dec	sp
      000211 15 81            [12] 1003 	dec	sp
      000213 D0 04            [24] 1004 	pop	ar4
      000215 D0 05            [24] 1005 	pop	ar5
      000217 D0 06            [24] 1006 	pop	ar6
      000219 D0 07            [24] 1007 	pop	ar7
      00021B                       1008 00103$:
                                   1009 ;	main.c:180: if(buff[0] == 0) //malloc fail returns NULL
      00021B 90r13r8F         [24] 1010 	mov	dptr,#_main_buff_65536_76
      00021E E0               [24] 1011 	movx	a,@dptr
      00021F F9               [12] 1012 	mov	r1,a
      000220 A3               [24] 1013 	inc	dptr
      000221 E0               [24] 1014 	movx	a,@dptr
      000222 FA               [12] 1015 	mov	r2,a
      000223 A3               [24] 1016 	inc	dptr
      000224 E0               [24] 1017 	movx	a,@dptr
      000225 E9               [12] 1018 	mov	a,r1
      000226 4A               [12] 1019 	orl	a,r2
      000227 70 22            [24] 1020 	jnz	00107$
                                   1021 ;	main.c:182: printf_tiny("\n \r  DMA for buffer0 failed");       //malloc failed for buffer0
      000229 C0 07            [24] 1022 	push	ar7
      00022B C0 06            [24] 1023 	push	ar6
      00022D C0 05            [24] 1024 	push	ar5
      00022F C0 04            [24] 1025 	push	ar4
      000231 74r9C            [12] 1026 	mov	a,#___str_13
      000233 C0 E0            [24] 1027 	push	acc
      000235 74s02            [12] 1028 	mov	a,#(___str_13 >> 8)
      000237 C0 E0            [24] 1029 	push	acc
      000239 12r00r00         [24] 1030 	lcall	_printf_tiny
      00023C 15 81            [12] 1031 	dec	sp
      00023E 15 81            [12] 1032 	dec	sp
      000240 D0 04            [24] 1033 	pop	ar4
      000242 D0 05            [24] 1034 	pop	ar5
      000244 D0 06            [24] 1035 	pop	ar6
      000246 D0 07            [24] 1036 	pop	ar7
      000248 02r02rE3         [24] 1037 	ljmp	00108$
      00024B                       1038 00107$:
                                   1039 ;	main.c:187: printf_tiny("\n \r malloc successful, %d B D M/r for buffer allocated",m_size);
      00024B C0 07            [24] 1040 	push	ar7
      00024D C0 06            [24] 1041 	push	ar6
      00024F C0 05            [24] 1042 	push	ar5
      000251 C0 04            [24] 1043 	push	ar4
      000253 C0 04            [24] 1044 	push	ar4
      000255 C0 05            [24] 1045 	push	ar5
      000257 74rB8            [12] 1046 	mov	a,#___str_14
      000259 C0 E0            [24] 1047 	push	acc
      00025B 74s02            [12] 1048 	mov	a,#(___str_14 >> 8)
      00025D C0 E0            [24] 1049 	push	acc
      00025F 12r00r00         [24] 1050 	lcall	_printf_tiny
      000262 E5 81            [12] 1051 	mov	a,sp
      000264 24 FC            [12] 1052 	add	a,#0xfc
      000266 F5 81            [12] 1053 	mov	sp,a
      000268 D0 04            [24] 1054 	pop	ar4
      00026A D0 05            [24] 1055 	pop	ar5
      00026C D0 06            [24] 1056 	pop	ar6
      00026E D0 07            [24] 1057 	pop	ar7
                                   1058 ;	main.c:189: start_addr[0] = (int) buff[0];
      000270 90r13r8F         [24] 1059 	mov	dptr,#_main_buff_65536_76
      000273 E0               [24] 1060 	movx	a,@dptr
      000274 FA               [12] 1061 	mov	r2,a
      000275 A3               [24] 1062 	inc	dptr
      000276 E0               [24] 1063 	movx	a,@dptr
      000277 FB               [12] 1064 	mov	r3,a
      000278 90r13rE9         [24] 1065 	mov	dptr,#_main_start_addr_65536_76
      00027B EA               [12] 1066 	mov	a,r2
      00027C F0               [24] 1067 	movx	@dptr,a
      00027D EB               [12] 1068 	mov	a,r3
      00027E A3               [24] 1069 	inc	dptr
      00027F F0               [24] 1070 	movx	@dptr,a
                                   1071 ;	main.c:190: end_addr[0] = (int)(buff[0] + m_size);
      000280 90r13r8F         [24] 1072 	mov	dptr,#_main_buff_65536_76
      000283 E0               [24] 1073 	movx	a,@dptr
      000284 F9               [12] 1074 	mov	r1,a
      000285 A3               [24] 1075 	inc	dptr
      000286 E0               [24] 1076 	movx	a,@dptr
      000287 FA               [12] 1077 	mov	r2,a
      000288 A3               [24] 1078 	inc	dptr
      000289 E0               [24] 1079 	movx	a,@dptr
      00028A EC               [12] 1080 	mov	a,r4
      00028B 29               [12] 1081 	add	a,r1
      00028C F9               [12] 1082 	mov	r1,a
      00028D ED               [12] 1083 	mov	a,r5
      00028E 3A               [12] 1084 	addc	a,r2
      00028F FA               [12] 1085 	mov	r2,a
      000290 90r14r25         [24] 1086 	mov	dptr,#_main_end_addr_65536_76
      000293 E9               [12] 1087 	mov	a,r1
      000294 F0               [24] 1088 	movx	@dptr,a
      000295 EA               [12] 1089 	mov	a,r2
      000296 A3               [24] 1090 	inc	dptr
      000297 F0               [24] 1091 	movx	@dptr,a
                                   1092 ;	main.c:192: b_size[0] = m_size;
      000298 90r14r61         [24] 1093 	mov	dptr,#_main_b_size_65536_76
      00029B EC               [12] 1094 	mov	a,r4
      00029C F0               [24] 1095 	movx	@dptr,a
      00029D ED               [12] 1096 	mov	a,r5
      00029E A3               [24] 1097 	inc	dptr
      00029F F0               [24] 1098 	movx	@dptr,a
                                   1099 ;	main.c:193: printf("\n \r Buffer 0 created at :0X0%x", start_addr[n_buff]);
      0002A0 EE               [12] 1100 	mov	a,r6
      0002A1 2E               [12] 1101 	add	a,r6
      0002A2 FA               [12] 1102 	mov	r2,a
      0002A3 EF               [12] 1103 	mov	a,r7
      0002A4 33               [12] 1104 	rlc	a
      0002A5 FB               [12] 1105 	mov	r3,a
      0002A6 EA               [12] 1106 	mov	a,r2
      0002A7 24rE9            [12] 1107 	add	a,#_main_start_addr_65536_76
      0002A9 F5 82            [12] 1108 	mov	dpl,a
      0002AB EB               [12] 1109 	mov	a,r3
      0002AC 34s13            [12] 1110 	addc	a,#(_main_start_addr_65536_76 >> 8)
      0002AE F5 83            [12] 1111 	mov	dph,a
      0002B0 E0               [24] 1112 	movx	a,@dptr
      0002B1 FA               [12] 1113 	mov	r2,a
      0002B2 A3               [24] 1114 	inc	dptr
      0002B3 E0               [24] 1115 	movx	a,@dptr
      0002B4 FB               [12] 1116 	mov	r3,a
      0002B5 C0 07            [24] 1117 	push	ar7
      0002B7 C0 06            [24] 1118 	push	ar6
      0002B9 C0 05            [24] 1119 	push	ar5
      0002BB C0 04            [24] 1120 	push	ar4
      0002BD C0 02            [24] 1121 	push	ar2
      0002BF C0 03            [24] 1122 	push	ar3
      0002C1 74rEF            [12] 1123 	mov	a,#___str_15
      0002C3 C0 E0            [24] 1124 	push	acc
      0002C5 74s02            [12] 1125 	mov	a,#(___str_15 >> 8)
      0002C7 C0 E0            [24] 1126 	push	acc
      0002C9 74 80            [12] 1127 	mov	a,#0x80
      0002CB C0 E0            [24] 1128 	push	acc
      0002CD 12r00r00         [24] 1129 	lcall	_printf
      0002D0 E5 81            [12] 1130 	mov	a,sp
      0002D2 24 FB            [12] 1131 	add	a,#0xfb
      0002D4 F5 81            [12] 1132 	mov	sp,a
      0002D6 D0 04            [24] 1133 	pop	ar4
      0002D8 D0 05            [24] 1134 	pop	ar5
      0002DA D0 06            [24] 1135 	pop	ar6
      0002DC D0 07            [24] 1136 	pop	ar7
                                   1137 ;	main.c:194: n_buff++;
      0002DE 0E               [12] 1138 	inc	r6
      0002DF BE 00 01         [24] 1139 	cjne	r6,#0x00,00324$
      0002E2 0F               [12] 1140 	inc	r7
      0002E3                       1141 00324$:
      0002E3                       1142 00108$:
                                   1143 ;	main.c:200: if((m_size < 2376) && (buff[0] != 0))
      0002E3 8C 02            [24] 1144 	mov	ar2,r4
      0002E5 8D 03            [24] 1145 	mov	ar3,r5
      0002E7 C3               [12] 1146 	clr	c
      0002E8 EA               [12] 1147 	mov	a,r2
      0002E9 94 48            [12] 1148 	subb	a,#0x48
      0002EB EB               [12] 1149 	mov	a,r3
      0002EC 94 09            [12] 1150 	subb	a,#0x09
      0002EE 40 03            [24] 1151 	jc	00325$
      0002F0 02r04r11         [24] 1152 	ljmp	00112$
      0002F3                       1153 00325$:
      0002F3 90r13r8F         [24] 1154 	mov	dptr,#_main_buff_65536_76
      0002F6 E0               [24] 1155 	movx	a,@dptr
      0002F7 F9               [12] 1156 	mov	r1,a
      0002F8 A3               [24] 1157 	inc	dptr
      0002F9 E0               [24] 1158 	movx	a,@dptr
      0002FA FA               [12] 1159 	mov	r2,a
      0002FB A3               [24] 1160 	inc	dptr
      0002FC E0               [24] 1161 	movx	a,@dptr
      0002FD FB               [12] 1162 	mov	r3,a
      0002FE E9               [12] 1163 	mov	a,r1
      0002FF 4A               [12] 1164 	orl	a,r2
      000300 70 03            [24] 1165 	jnz	00326$
      000302 02r04r11         [24] 1166 	ljmp	00112$
      000305                       1167 00326$:
                                   1168 ;	main.c:202: buff[1] = (uint8_t * ) malloc(m_size);
      000305 8C 82            [24] 1169 	mov	dpl,r4
      000307 8D 83            [24] 1170 	mov	dph,r5
      000309 C0 07            [24] 1171 	push	ar7
      00030B C0 06            [24] 1172 	push	ar6
      00030D C0 05            [24] 1173 	push	ar5
      00030F C0 04            [24] 1174 	push	ar4
      000311 12r00r00         [24] 1175 	lcall	_malloc
      000314 AA 82            [24] 1176 	mov	r2,dpl
      000316 AB 83            [24] 1177 	mov	r3,dph
      000318 D0 04            [24] 1178 	pop	ar4
      00031A D0 05            [24] 1179 	pop	ar5
      00031C D0 06            [24] 1180 	pop	ar6
      00031E D0 07            [24] 1181 	pop	ar7
      000320 8B 01            [24] 1182 	mov	ar1,r3
      000322 7B 00            [12] 1183 	mov	r3,#0x00
      000324 90r13r92         [24] 1184 	mov	dptr,#(_main_buff_65536_76 + 0x0003)
      000327 EA               [12] 1185 	mov	a,r2
      000328 F0               [24] 1186 	movx	@dptr,a
      000329 E9               [12] 1187 	mov	a,r1
      00032A A3               [24] 1188 	inc	dptr
      00032B F0               [24] 1189 	movx	@dptr,a
      00032C EB               [12] 1190 	mov	a,r3
      00032D A3               [24] 1191 	inc	dptr
      00032E F0               [24] 1192 	movx	@dptr,a
                                   1193 ;	main.c:203: if(buff[1]==0)
      00032F EA               [12] 1194 	mov	a,r2
      000330 49               [12] 1195 	orl	a,r1
      000331 70 25            [24] 1196 	jnz	00110$
                                   1197 ;	main.c:205: printf("\n\rMalloc for Buffer 1 failed\n\r");
      000333 C0 07            [24] 1198 	push	ar7
      000335 C0 06            [24] 1199 	push	ar6
      000337 C0 05            [24] 1200 	push	ar5
      000339 C0 04            [24] 1201 	push	ar4
      00033B 74r0E            [12] 1202 	mov	a,#___str_16
      00033D C0 E0            [24] 1203 	push	acc
      00033F 74s03            [12] 1204 	mov	a,#(___str_16 >> 8)
      000341 C0 E0            [24] 1205 	push	acc
      000343 74 80            [12] 1206 	mov	a,#0x80
      000345 C0 E0            [24] 1207 	push	acc
      000347 12r00r00         [24] 1208 	lcall	_printf
      00034A 15 81            [12] 1209 	dec	sp
      00034C 15 81            [12] 1210 	dec	sp
      00034E 15 81            [12] 1211 	dec	sp
      000350 D0 04            [24] 1212 	pop	ar4
      000352 D0 05            [24] 1213 	pop	ar5
      000354 D0 06            [24] 1214 	pop	ar6
      000356 D0 07            [24] 1215 	pop	ar7
      000358                       1216 00110$:
                                   1217 ;	main.c:208: start_addr[1] = (int) buff[1];
      000358 90r13r92         [24] 1218 	mov	dptr,#(_main_buff_65536_76 + 0x0003)
      00035B E0               [24] 1219 	movx	a,@dptr
      00035C FA               [12] 1220 	mov	r2,a
      00035D A3               [24] 1221 	inc	dptr
      00035E E0               [24] 1222 	movx	a,@dptr
      00035F FB               [12] 1223 	mov	r3,a
      000360 90r13rEB         [24] 1224 	mov	dptr,#(_main_start_addr_65536_76 + 0x0002)
      000363 EA               [12] 1225 	mov	a,r2
      000364 F0               [24] 1226 	movx	@dptr,a
      000365 EB               [12] 1227 	mov	a,r3
      000366 A3               [24] 1228 	inc	dptr
      000367 F0               [24] 1229 	movx	@dptr,a
                                   1230 ;	main.c:209: end_addr[1] = (int)(buff[1] + m_size);
      000368 90r13r92         [24] 1231 	mov	dptr,#(_main_buff_65536_76 + 0x0003)
      00036B E0               [24] 1232 	movx	a,@dptr
      00036C F9               [12] 1233 	mov	r1,a
      00036D A3               [24] 1234 	inc	dptr
      00036E E0               [24] 1235 	movx	a,@dptr
      00036F FA               [12] 1236 	mov	r2,a
      000370 A3               [24] 1237 	inc	dptr
      000371 E0               [24] 1238 	movx	a,@dptr
      000372 EC               [12] 1239 	mov	a,r4
      000373 29               [12] 1240 	add	a,r1
      000374 F9               [12] 1241 	mov	r1,a
      000375 ED               [12] 1242 	mov	a,r5
      000376 3A               [12] 1243 	addc	a,r2
      000377 FA               [12] 1244 	mov	r2,a
      000378 90r14r27         [24] 1245 	mov	dptr,#(_main_end_addr_65536_76 + 0x0002)
      00037B E9               [12] 1246 	mov	a,r1
      00037C F0               [24] 1247 	movx	@dptr,a
      00037D EA               [12] 1248 	mov	a,r2
      00037E A3               [24] 1249 	inc	dptr
      00037F F0               [24] 1250 	movx	@dptr,a
                                   1251 ;	main.c:211: b_size[1] = m_size;
      000380 90r14r63         [24] 1252 	mov	dptr,#(_main_b_size_65536_76 + 0x0002)
      000383 EC               [12] 1253 	mov	a,r4
      000384 F0               [24] 1254 	movx	@dptr,a
      000385 ED               [12] 1255 	mov	a,r5
      000386 A3               [24] 1256 	inc	dptr
      000387 F0               [24] 1257 	movx	@dptr,a
                                   1258 ;	main.c:212: buff1_size = m_size;
      000388 90r13r88         [24] 1259 	mov	dptr,#_buff1_size
      00038B EC               [12] 1260 	mov	a,r4
      00038C F0               [24] 1261 	movx	@dptr,a
      00038D ED               [12] 1262 	mov	a,r5
      00038E A3               [24] 1263 	inc	dptr
      00038F F0               [24] 1264 	movx	@dptr,a
                                   1265 ;	main.c:214: printf_tiny("\n \r DMA for Buffer 1  - malloc Successful\n \r ");
      000390 C0 07            [24] 1266 	push	ar7
      000392 C0 06            [24] 1267 	push	ar6
      000394 74r2D            [12] 1268 	mov	a,#___str_17
      000396 C0 E0            [24] 1269 	push	acc
      000398 74s03            [12] 1270 	mov	a,#(___str_17 >> 8)
      00039A C0 E0            [24] 1271 	push	acc
      00039C 12r00r00         [24] 1272 	lcall	_printf_tiny
      00039F 15 81            [12] 1273 	dec	sp
      0003A1 15 81            [12] 1274 	dec	sp
      0003A3 D0 06            [24] 1275 	pop	ar6
      0003A5 D0 07            [24] 1276 	pop	ar7
                                   1277 ;	main.c:215: printf("\n \r Buffer 1 created at : :0X0%x \n \r ", start_addr[n_buff]);
      0003A7 EE               [12] 1278 	mov	a,r6
      0003A8 2E               [12] 1279 	add	a,r6
      0003A9 FC               [12] 1280 	mov	r4,a
      0003AA EF               [12] 1281 	mov	a,r7
      0003AB 33               [12] 1282 	rlc	a
      0003AC FD               [12] 1283 	mov	r5,a
      0003AD EC               [12] 1284 	mov	a,r4
      0003AE 24rE9            [12] 1285 	add	a,#_main_start_addr_65536_76
      0003B0 F5 82            [12] 1286 	mov	dpl,a
      0003B2 ED               [12] 1287 	mov	a,r5
      0003B3 34s13            [12] 1288 	addc	a,#(_main_start_addr_65536_76 >> 8)
      0003B5 F5 83            [12] 1289 	mov	dph,a
      0003B7 E0               [24] 1290 	movx	a,@dptr
      0003B8 FC               [12] 1291 	mov	r4,a
      0003B9 A3               [24] 1292 	inc	dptr
      0003BA E0               [24] 1293 	movx	a,@dptr
      0003BB FD               [12] 1294 	mov	r5,a
      0003BC C0 07            [24] 1295 	push	ar7
      0003BE C0 06            [24] 1296 	push	ar6
      0003C0 C0 04            [24] 1297 	push	ar4
      0003C2 C0 05            [24] 1298 	push	ar5
      0003C4 74r5B            [12] 1299 	mov	a,#___str_18
      0003C6 C0 E0            [24] 1300 	push	acc
      0003C8 74s03            [12] 1301 	mov	a,#(___str_18 >> 8)
      0003CA C0 E0            [24] 1302 	push	acc
      0003CC 74 80            [12] 1303 	mov	a,#0x80
      0003CE C0 E0            [24] 1304 	push	acc
      0003D0 12r00r00         [24] 1305 	lcall	_printf
      0003D3 E5 81            [12] 1306 	mov	a,sp
      0003D5 24 FB            [12] 1307 	add	a,#0xfb
      0003D7 F5 81            [12] 1308 	mov	sp,a
      0003D9 D0 06            [24] 1309 	pop	ar6
      0003DB D0 07            [24] 1310 	pop	ar7
                                   1311 ;	main.c:216: n_buff++;
      0003DD 90r15r15         [24] 1312 	mov	dptr,#_main_n_buff_65536_76
      0003E0 74 01            [12] 1313 	mov	a,#0x01
      0003E2 2E               [12] 1314 	add	a,r6
      0003E3 F0               [24] 1315 	movx	@dptr,a
      0003E4 E4               [12] 1316 	clr	a
      0003E5 3F               [12] 1317 	addc	a,r7
      0003E6 A3               [24] 1318 	inc	dptr
      0003E7 F0               [24] 1319 	movx	@dptr,a
                                   1320 ;	main.c:217: n_storedC[0] = 0;
      0003E8 90r14r9D         [24] 1321 	mov	dptr,#_main_n_storedC_65536_76
      0003EB E4               [12] 1322 	clr	a
      0003EC F0               [24] 1323 	movx	@dptr,a
      0003ED A3               [24] 1324 	inc	dptr
      0003EE F0               [24] 1325 	movx	@dptr,a
                                   1326 ;	main.c:218: n_Fspace[0] = buff1_size;
      0003EF 90r13r88         [24] 1327 	mov	dptr,#_buff1_size
      0003F2 E0               [24] 1328 	movx	a,@dptr
      0003F3 FC               [12] 1329 	mov	r4,a
      0003F4 A3               [24] 1330 	inc	dptr
      0003F5 E0               [24] 1331 	movx	a,@dptr
      0003F6 FD               [12] 1332 	mov	r5,a
      0003F7 90r14rD9         [24] 1333 	mov	dptr,#_main_n_Fspace_65536_76
      0003FA EC               [12] 1334 	mov	a,r4
      0003FB F0               [24] 1335 	movx	@dptr,a
      0003FC ED               [12] 1336 	mov	a,r5
      0003FD A3               [24] 1337 	inc	dptr
      0003FE F0               [24] 1338 	movx	@dptr,a
                                   1339 ;	main.c:219: n_Fspace[1] = buff1_size;
      0003FF 90r13r88         [24] 1340 	mov	dptr,#_buff1_size
      000402 E0               [24] 1341 	movx	a,@dptr
      000403 FC               [12] 1342 	mov	r4,a
      000404 A3               [24] 1343 	inc	dptr
      000405 E0               [24] 1344 	movx	a,@dptr
      000406 FD               [12] 1345 	mov	r5,a
      000407 90r14rDB         [24] 1346 	mov	dptr,#(_main_n_Fspace_65536_76 + 0x0002)
      00040A EC               [12] 1347 	mov	a,r4
      00040B F0               [24] 1348 	movx	@dptr,a
      00040C ED               [12] 1349 	mov	a,r5
      00040D A3               [24] 1350 	inc	dptr
      00040E F0               [24] 1351 	movx	@dptr,a
                                   1352 ;	main.c:220: break;
      00040F 80 2E            [24] 1353 	sjmp	00117$
      000411                       1354 00112$:
                                   1355 ;	main.c:224: free(buff[0]);  //also free buffer 0 and ask user to enter value such as 2 buffer can be created
      000411 90r13r8F         [24] 1356 	mov	dptr,#_main_buff_65536_76
      000414 E0               [24] 1357 	movx	a,@dptr
      000415 FB               [12] 1358 	mov	r3,a
      000416 A3               [24] 1359 	inc	dptr
      000417 E0               [24] 1360 	movx	a,@dptr
      000418 FC               [12] 1361 	mov	r4,a
      000419 A3               [24] 1362 	inc	dptr
      00041A E0               [24] 1363 	movx	a,@dptr
      00041B FD               [12] 1364 	mov	r5,a
      00041C 8B 82            [24] 1365 	mov	dpl,r3
      00041E 8C 83            [24] 1366 	mov	dph,r4
      000420 8D F0            [24] 1367 	mov	b,r5
      000422 C0 07            [24] 1368 	push	ar7
      000424 C0 06            [24] 1369 	push	ar6
      000426 12r00r00         [24] 1370 	lcall	_free
                                   1371 ;	main.c:225: printf_tiny("\n \r Malloc for Buffer 1 failed, Please re-enter value");
      000429 74r81            [12] 1372 	mov	a,#___str_19
      00042B C0 E0            [24] 1373 	push	acc
      00042D 74s03            [12] 1374 	mov	a,#(___str_19 >> 8)
      00042F C0 E0            [24] 1375 	push	acc
      000431 12r00r00         [24] 1376 	lcall	_printf_tiny
      000434 15 81            [12] 1377 	dec	sp
      000436 15 81            [12] 1378 	dec	sp
      000438 D0 06            [24] 1379 	pop	ar6
      00043A D0 07            [24] 1380 	pop	ar7
      00043C 02r01r74         [24] 1381 	ljmp	00116$
      00043F                       1382 00117$:
                                   1383 ;	main.c:229: printf_tiny("\n \r Press '*' - for help - instruction for command and char input");
      00043F 74rB7            [12] 1384 	mov	a,#___str_20
      000441 C0 E0            [24] 1385 	push	acc
      000443 74s03            [12] 1386 	mov	a,#(___str_20 >> 8)
      000445 C0 E0            [24] 1387 	push	acc
      000447 12r00r00         [24] 1388 	lcall	_printf_tiny
      00044A 15 81            [12] 1389 	dec	sp
      00044C 15 81            [12] 1390 	dec	sp
                                   1391 ;	main.c:231: while (1)
      00044E 7E 00            [12] 1392 	mov	r6,#0x00
      000450 7F 00            [12] 1393 	mov	r7,#0x00
      000452 90r15r15         [24] 1394 	mov	dptr,#_main_n_buff_65536_76
      000455 E0               [24] 1395 	movx	a,@dptr
      000456 F5*07            [12] 1396 	mov	_main_sloc3_1_0,a
      000458 A3               [24] 1397 	inc	dptr
      000459 E0               [24] 1398 	movx	a,@dptr
      00045A F5*08            [12] 1399 	mov	(_main_sloc3_1_0 + 1),a
      00045C                       1400 00154$:
                                   1401 ;	main.c:233: printf_tiny("\n \r Enter character : \t");
      00045C C0 07            [24] 1402 	push	ar7
      00045E C0 06            [24] 1403 	push	ar6
      000460 74rF9            [12] 1404 	mov	a,#___str_21
      000462 C0 E0            [24] 1405 	push	acc
      000464 74s03            [12] 1406 	mov	a,#(___str_21 >> 8)
      000466 C0 E0            [24] 1407 	push	acc
      000468 12r00r00         [24] 1408 	lcall	_printf_tiny
      00046B 15 81            [12] 1409 	dec	sp
      00046D 15 81            [12] 1410 	dec	sp
                                   1411 ;	main.c:235: uint16_t r_ch = getchar(); //get character input
      00046F 12r00r12         [24] 1412 	lcall	_getchar
      000472 AA 82            [24] 1413 	mov	r2,dpl
      000474 AB 83            [24] 1414 	mov	r3,dph
      000476 D0 06            [24] 1415 	pop	ar6
      000478 D0 07            [24] 1416 	pop	ar7
                                   1417 ;	main.c:236: n_char_ip++;
      00047A 0E               [12] 1418 	inc	r6
      00047B BE 00 01         [24] 1419 	cjne	r6,#0x00,00328$
      00047E 0F               [12] 1420 	inc	r7
      00047F                       1421 00328$:
                                   1422 ;	main.c:238: if(r_ch != '?')
      00047F BA 3F 05         [24] 1423 	cjne	r2,#0x3f,00329$
      000482 BB 00 02         [24] 1424 	cjne	r3,#0x00,00329$
      000485 80 0C            [24] 1425 	sjmp	00119$
      000487                       1426 00329$:
                                   1427 ;	main.c:240: n_rbytes_after_q++;		//to track number of received bytes after last Q mark
      000487 90r15r19         [24] 1428 	mov	dptr,#_main_n_rbytes_after_q_65536_76
      00048A E0               [24] 1429 	movx	a,@dptr
      00048B 24 01            [12] 1430 	add	a,#0x01
      00048D F0               [24] 1431 	movx	@dptr,a
      00048E A3               [24] 1432 	inc	dptr
      00048F E0               [24] 1433 	movx	a,@dptr
      000490 34 00            [12] 1434 	addc	a,#0x00
      000492 F0               [24] 1435 	movx	@dptr,a
      000493                       1436 00119$:
                                   1437 ;	main.c:242: putchar(r_ch);
      000493 8A 82            [24] 1438 	mov	dpl,r2
      000495 8B 83            [24] 1439 	mov	dph,r3
      000497 C0 07            [24] 1440 	push	ar7
      000499 C0 06            [24] 1441 	push	ar6
      00049B C0 03            [24] 1442 	push	ar3
      00049D C0 02            [24] 1443 	push	ar2
      00049F 12r00r20         [24] 1444 	lcall	_putchar
      0004A2 D0 02            [24] 1445 	pop	ar2
      0004A4 D0 03            [24] 1446 	pop	ar3
      0004A6 D0 06            [24] 1447 	pop	ar6
      0004A8 D0 07            [24] 1448 	pop	ar7
                                   1449 ;	main.c:243: printf("\n \r Total rx bytes = %d\t", n_char_ip);
      0004AA C0 07            [24] 1450 	push	ar7
      0004AC C0 06            [24] 1451 	push	ar6
      0004AE C0 03            [24] 1452 	push	ar3
      0004B0 C0 02            [24] 1453 	push	ar2
      0004B2 C0 06            [24] 1454 	push	ar6
      0004B4 C0 07            [24] 1455 	push	ar7
      0004B6 74r11            [12] 1456 	mov	a,#___str_22
      0004B8 C0 E0            [24] 1457 	push	acc
      0004BA 74s04            [12] 1458 	mov	a,#(___str_22 >> 8)
      0004BC C0 E0            [24] 1459 	push	acc
      0004BE 74 80            [12] 1460 	mov	a,#0x80
      0004C0 C0 E0            [24] 1461 	push	acc
      0004C2 12r00r00         [24] 1462 	lcall	_printf
      0004C5 E5 81            [12] 1463 	mov	a,sp
      0004C7 24 FB            [12] 1464 	add	a,#0xfb
      0004C9 F5 81            [12] 1465 	mov	sp,a
      0004CB D0 02            [24] 1466 	pop	ar2
      0004CD D0 03            [24] 1467 	pop	ar3
      0004CF D0 06            [24] 1468 	pop	ar6
      0004D1 D0 07            [24] 1469 	pop	ar7
                                   1470 ;	main.c:252: if ((r_ch >= 'a' && r_ch <= 'z') && (n_Fspace[0] != 0))
      0004D3 8A 00            [24] 1471 	mov	ar0,r2
      0004D5 8B 01            [24] 1472 	mov	ar1,r3
      0004D7 C3               [12] 1473 	clr	c
      0004D8 E8               [12] 1474 	mov	a,r0
      0004D9 94 61            [12] 1475 	subb	a,#0x61
      0004DB E9               [12] 1476 	mov	a,r1
      0004DC 94 00            [12] 1477 	subb	a,#0x00
      0004DE 50 03            [24] 1478 	jnc	00330$
      0004E0 02r05rF3         [24] 1479 	ljmp	00149$
      0004E3                       1480 00330$:
      0004E3 8A 00            [24] 1481 	mov	ar0,r2
      0004E5 8B 01            [24] 1482 	mov	ar1,r3
      0004E7 C3               [12] 1483 	clr	c
      0004E8 74 7A            [12] 1484 	mov	a,#0x7a
      0004EA 98               [12] 1485 	subb	a,r0
      0004EB E4               [12] 1486 	clr	a
      0004EC 99               [12] 1487 	subb	a,r1
      0004ED 50 03            [24] 1488 	jnc	00331$
      0004EF 02r05rF3         [24] 1489 	ljmp	00149$
      0004F2                       1490 00331$:
      0004F2 90r14rD9         [24] 1491 	mov	dptr,#_main_n_Fspace_65536_76
      0004F5 E0               [24] 1492 	movx	a,@dptr
      0004F6 F8               [12] 1493 	mov	r0,a
      0004F7 A3               [24] 1494 	inc	dptr
      0004F8 E0               [24] 1495 	movx	a,@dptr
      0004F9 F9               [12] 1496 	mov	r1,a
      0004FA 48               [12] 1497 	orl	a,r0
      0004FB 70 03            [24] 1498 	jnz	00332$
      0004FD 02r05rF3         [24] 1499 	ljmp	00149$
      000500                       1500 00332$:
                                   1501 ;	main.c:254: DEBUGPORT(0xAA);
      000500 C0 06            [24] 1502 	push	ar6
      000502 C0 07            [24] 1503 	push	ar7
      000504 75 82 AA         [24] 1504 	mov	dpl,#0xaa
      000507 C0 07            [24] 1505 	push	ar7
      000509 C0 06            [24] 1506 	push	ar6
      00050B C0 03            [24] 1507 	push	ar3
      00050D C0 02            [24] 1508 	push	ar2
      00050F 12r00r00         [24] 1509 	lcall	_dataout
      000512 D0 02            [24] 1510 	pop	ar2
      000514 D0 03            [24] 1511 	pop	ar3
      000516 D0 06            [24] 1512 	pop	ar6
      000518 D0 07            [24] 1513 	pop	ar7
                                   1514 ;	main.c:255: *(buff[0] + nstored_bytes) = r_ch;
      00051A 90r13r8F         [24] 1515 	mov	dptr,#_main_buff_65536_76
      00051D E0               [24] 1516 	movx	a,@dptr
      00051E F5*00            [12] 1517 	mov	_main_sloc0_1_0,a
      000520 A3               [24] 1518 	inc	dptr
      000521 E0               [24] 1519 	movx	a,@dptr
      000522 F5*01            [12] 1520 	mov	(_main_sloc0_1_0 + 1),a
      000524 A3               [24] 1521 	inc	dptr
      000525 E0               [24] 1522 	movx	a,@dptr
      000526 F5*02            [12] 1523 	mov	(_main_sloc0_1_0 + 2),a
      000528 90r15r17         [24] 1524 	mov	dptr,#_main_nstored_bytes_65536_76
      00052B E0               [24] 1525 	movx	a,@dptr
      00052C F5*03            [12] 1526 	mov	_main_sloc1_1_0,a
      00052E A3               [24] 1527 	inc	dptr
      00052F E0               [24] 1528 	movx	a,@dptr
      000530 F5*04            [12] 1529 	mov	(_main_sloc1_1_0 + 1),a
      000532 E5*03            [12] 1530 	mov	a,_main_sloc1_1_0
      000534 25*00            [12] 1531 	add	a,_main_sloc0_1_0
      000536 F5*00            [12] 1532 	mov	_main_sloc0_1_0,a
      000538 E5*04            [12] 1533 	mov	a,(_main_sloc1_1_0 + 1)
      00053A 35*01            [12] 1534 	addc	a,(_main_sloc0_1_0 + 1)
      00053C F5*01            [12] 1535 	mov	(_main_sloc0_1_0 + 1),a
      00053E 8A 06            [24] 1536 	mov	ar6,r2
      000540 8B 07            [24] 1537 	mov	ar7,r3
      000542 85*00 82         [24] 1538 	mov	dpl,_main_sloc0_1_0
      000545 85*01 83         [24] 1539 	mov	dph,(_main_sloc0_1_0 + 1)
      000548 85*02 F0         [24] 1540 	mov	b,(_main_sloc0_1_0 + 2)
      00054B EE               [12] 1541 	mov	a,r6
      00054C 12r00r00         [24] 1542 	lcall	__gptrput
                                   1543 ;	main.c:257: nstored_bytes++;
      00054F 90r15r17         [24] 1544 	mov	dptr,#_main_nstored_bytes_65536_76
      000552 74 01            [12] 1545 	mov	a,#0x01
      000554 25*03            [12] 1546 	add	a,_main_sloc1_1_0
      000556 F0               [24] 1547 	movx	@dptr,a
      000557 E4               [12] 1548 	clr	a
      000558 35*04            [12] 1549 	addc	a,(_main_sloc1_1_0 + 1)
      00055A A3               [24] 1550 	inc	dptr
      00055B F0               [24] 1551 	movx	@dptr,a
                                   1552 ;	main.c:259: n_storedC[0] = nstored_bytes;
      00055C 90r15r17         [24] 1553 	mov	dptr,#_main_nstored_bytes_65536_76
      00055F E0               [24] 1554 	movx	a,@dptr
      000560 F5*03            [12] 1555 	mov	_main_sloc1_1_0,a
      000562 A3               [24] 1556 	inc	dptr
      000563 E0               [24] 1557 	movx	a,@dptr
      000564 F5*04            [12] 1558 	mov	(_main_sloc1_1_0 + 1),a
      000566 90r14r9D         [24] 1559 	mov	dptr,#_main_n_storedC_65536_76
      000569 E5*03            [12] 1560 	mov	a,_main_sloc1_1_0
      00056B F0               [24] 1561 	movx	@dptr,a
      00056C E5*04            [12] 1562 	mov	a,(_main_sloc1_1_0 + 1)
      00056E A3               [24] 1563 	inc	dptr
      00056F F0               [24] 1564 	movx	@dptr,a
                                   1565 ;	main.c:260: n_Fspace[0] = buff1_size - n_storedC[0];
      000570 90r13r88         [24] 1566 	mov	dptr,#_buff1_size
      000573 E0               [24] 1567 	movx	a,@dptr
      000574 F8               [12] 1568 	mov	r0,a
      000575 A3               [24] 1569 	inc	dptr
      000576 E0               [24] 1570 	movx	a,@dptr
      000577 F9               [12] 1571 	mov	r1,a
      000578 E8               [12] 1572 	mov	a,r0
      000579 C3               [12] 1573 	clr	c
      00057A 95*03            [12] 1574 	subb	a,_main_sloc1_1_0
      00057C F8               [12] 1575 	mov	r0,a
      00057D E9               [12] 1576 	mov	a,r1
      00057E 95*04            [12] 1577 	subb	a,(_main_sloc1_1_0 + 1)
      000580 F9               [12] 1578 	mov	r1,a
      000581 90r14rD9         [24] 1579 	mov	dptr,#_main_n_Fspace_65536_76
      000584 E8               [12] 1580 	mov	a,r0
      000585 F0               [24] 1581 	movx	@dptr,a
      000586 E9               [12] 1582 	mov	a,r1
      000587 A3               [24] 1583 	inc	dptr
      000588 F0               [24] 1584 	movx	@dptr,a
                                   1585 ;	main.c:262: printf("No. Stored B = %d ", nstored_bytes);
      000589 C0 07            [24] 1586 	push	ar7
      00058B C0 06            [24] 1587 	push	ar6
      00058D C0 03            [24] 1588 	push	ar3
      00058F C0 02            [24] 1589 	push	ar2
      000591 C0*03            [24] 1590 	push	_main_sloc1_1_0
      000593 C0*04            [24] 1591 	push	(_main_sloc1_1_0 + 1)
      000595 74r2A            [12] 1592 	mov	a,#___str_23
      000597 C0 E0            [24] 1593 	push	acc
      000599 74s04            [12] 1594 	mov	a,#(___str_23 >> 8)
      00059B C0 E0            [24] 1595 	push	acc
      00059D 74 80            [12] 1596 	mov	a,#0x80
      00059F C0 E0            [24] 1597 	push	acc
      0005A1 12r00r00         [24] 1598 	lcall	_printf
      0005A4 E5 81            [12] 1599 	mov	a,sp
      0005A6 24 FB            [12] 1600 	add	a,#0xfb
      0005A8 F5 81            [12] 1601 	mov	sp,a
      0005AA D0 02            [24] 1602 	pop	ar2
      0005AC D0 03            [24] 1603 	pop	ar3
      0005AE D0 06            [24] 1604 	pop	ar6
      0005B0 D0 07            [24] 1605 	pop	ar7
                                   1606 ;	main.c:263: printf("\t'%c' - stored at %p\n\r", r_ch, (buff[0] + nstored_bytes));
      0005B2 90r13r8F         [24] 1607 	mov	dptr,#_main_buff_65536_76
      0005B5 E0               [24] 1608 	movx	a,@dptr
      0005B6 F8               [12] 1609 	mov	r0,a
      0005B7 A3               [24] 1610 	inc	dptr
      0005B8 E0               [24] 1611 	movx	a,@dptr
      0005B9 F9               [12] 1612 	mov	r1,a
      0005BA A3               [24] 1613 	inc	dptr
      0005BB E0               [24] 1614 	movx	a,@dptr
      0005BC FF               [12] 1615 	mov	r7,a
      0005BD E5*03            [12] 1616 	mov	a,_main_sloc1_1_0
      0005BF 28               [12] 1617 	add	a,r0
      0005C0 F8               [12] 1618 	mov	r0,a
      0005C1 E5*04            [12] 1619 	mov	a,(_main_sloc1_1_0 + 1)
      0005C3 39               [12] 1620 	addc	a,r1
      0005C4 F9               [12] 1621 	mov	r1,a
      0005C5 C0 07            [24] 1622 	push	ar7
      0005C7 C0 06            [24] 1623 	push	ar6
      0005C9 C0 00            [24] 1624 	push	ar0
      0005CB C0 01            [24] 1625 	push	ar1
      0005CD C0 07            [24] 1626 	push	ar7
      0005CF C0 02            [24] 1627 	push	ar2
      0005D1 C0 03            [24] 1628 	push	ar3
      0005D3 74r3D            [12] 1629 	mov	a,#___str_24
      0005D5 C0 E0            [24] 1630 	push	acc
      0005D7 74s04            [12] 1631 	mov	a,#(___str_24 >> 8)
      0005D9 C0 E0            [24] 1632 	push	acc
      0005DB 74 80            [12] 1633 	mov	a,#0x80
      0005DD C0 E0            [24] 1634 	push	acc
      0005DF 12r00r00         [24] 1635 	lcall	_printf
      0005E2 E5 81            [12] 1636 	mov	a,sp
      0005E4 24 F8            [12] 1637 	add	a,#0xf8
      0005E6 F5 81            [12] 1638 	mov	sp,a
      0005E8 D0 06            [24] 1639 	pop	ar6
      0005EA D0 07            [24] 1640 	pop	ar7
      0005EC D0 07            [24] 1641 	pop	ar7
      0005EE D0 06            [24] 1642 	pop	ar6
      0005F0 02r04r5C         [24] 1643 	ljmp	00154$
      0005F3                       1644 00149$:
                                   1645 ;	main.c:267: switch(r_ch)
      0005F3 BA 2A 05         [24] 1646 	cjne	r2,#0x2a,00333$
      0005F6 BB 00 02         [24] 1647 	cjne	r3,#0x00,00333$
      0005F9 80 30            [24] 1648 	sjmp	00120$
      0005FB                       1649 00333$:
      0005FB BA 2B 06         [24] 1650 	cjne	r2,#0x2b,00334$
      0005FE BB 00 03         [24] 1651 	cjne	r3,#0x00,00334$
      000601 02r06rAE         [24] 1652 	ljmp	00121$
      000604                       1653 00334$:
      000604 BA 2D 06         [24] 1654 	cjne	r2,#0x2d,00335$
      000607 BB 00 03         [24] 1655 	cjne	r3,#0x00,00335$
      00060A 02r08r2E         [24] 1656 	ljmp	00125$
      00060D                       1657 00335$:
      00060D BA 3D 06         [24] 1658 	cjne	r2,#0x3d,00336$
      000610 BB 00 03         [24] 1659 	cjne	r3,#0x00,00336$
      000613 02r0BrEB         [24] 1660 	ljmp	00137$
      000616                       1661 00336$:
      000616 BA 3F 06         [24] 1662 	cjne	r2,#0x3f,00337$
      000619 BB 00 03         [24] 1663 	cjne	r3,#0x00,00337$
      00061C 02r09r16         [24] 1664 	ljmp	00130$
      00061F                       1665 00337$:
      00061F BA 40 06         [24] 1666 	cjne	r2,#0x40,00338$
      000622 BB 00 03         [24] 1667 	cjne	r3,#0x00,00338$
      000625 02r0Dr58         [24] 1668 	ljmp	00144$
      000628                       1669 00338$:
      000628 02r0Er65         [24] 1670 	ljmp	00146$
                                   1671 ;	main.c:270: case '*': // for help - i.e. Instruction for command and character inputs
      00062B                       1672 00120$:
                                   1673 ;	main.c:272: printf_tiny("\n \r  --------- Instruction for command and character input:  \n\r Enter \n\r----------");
      00062B C0 07            [24] 1674 	push	ar7
      00062D C0 06            [24] 1675 	push	ar6
      00062F 74r54            [12] 1676 	mov	a,#___str_25
      000631 C0 E0            [24] 1677 	push	acc
      000633 74s04            [12] 1678 	mov	a,#(___str_25 >> 8)
      000635 C0 E0            [24] 1679 	push	acc
      000637 12r00r00         [24] 1680 	lcall	_printf_tiny
      00063A 15 81            [12] 1681 	dec	sp
      00063C 15 81            [12] 1682 	dec	sp
                                   1683 ;	main.c:273: printf_tiny("\n \r  '+' : to Add a New Buffer:");
      00063E 74rA7            [12] 1684 	mov	a,#___str_26
      000640 C0 E0            [24] 1685 	push	acc
      000642 74s04            [12] 1686 	mov	a,#(___str_26 >> 8)
      000644 C0 E0            [24] 1687 	push	acc
      000646 12r00r00         [24] 1688 	lcall	_printf_tiny
      000649 15 81            [12] 1689 	dec	sp
      00064B 15 81            [12] 1690 	dec	sp
                                   1691 ;	main.c:274: printf_tiny("\n \r  '-' : to Clean a Buffer:");
      00064D 74rC7            [12] 1692 	mov	a,#___str_27
      00064F C0 E0            [24] 1693 	push	acc
      000651 74s04            [12] 1694 	mov	a,#(___str_27 >> 8)
      000653 C0 E0            [24] 1695 	push	acc
      000655 12r00r00         [24] 1696 	lcall	_printf_tiny
      000658 15 81            [12] 1697 	dec	sp
      00065A 15 81            [12] 1698 	dec	sp
                                   1699 ;	main.c:275: printf_tiny("\n \r  '?' : to Display a Detailed Heap Report:");
      00065C 74rE5            [12] 1700 	mov	a,#___str_28
      00065E C0 E0            [24] 1701 	push	acc
      000660 74s04            [12] 1702 	mov	a,#(___str_28 >> 8)
      000662 C0 E0            [24] 1703 	push	acc
      000664 12r00r00         [24] 1704 	lcall	_printf_tiny
      000667 15 81            [12] 1705 	dec	sp
      000669 15 81            [12] 1706 	dec	sp
                                   1707 ;	main.c:276: printf_tiny("\n \r  '@' : to Clear all Buffers Data and Start Again:");
      00066B 74r13            [12] 1708 	mov	a,#___str_29
      00066D C0 E0            [24] 1709 	push	acc
      00066F 74s05            [12] 1710 	mov	a,#(___str_29 >> 8)
      000671 C0 E0            [24] 1711 	push	acc
      000673 12r00r00         [24] 1712 	lcall	_printf_tiny
      000676 15 81            [12] 1713 	dec	sp
      000678 15 81            [12] 1714 	dec	sp
                                   1715 ;	main.c:277: printf_tiny("\n \r  '=' : to Data printing of buffer"); //if (r_ch == '=') //  Data printing of buffer 0
      00067A 74r49            [12] 1716 	mov	a,#___str_30
      00067C C0 E0            [24] 1717 	push	acc
      00067E 74s05            [12] 1718 	mov	a,#(___str_30 >> 8)
      000680 C0 E0            [24] 1719 	push	acc
      000682 12r00r00         [24] 1720 	lcall	_printf_tiny
      000685 15 81            [12] 1721 	dec	sp
      000687 15 81            [12] 1722 	dec	sp
                                   1723 ;	main.c:278: printf_tiny("\n \r  small 'a'-'z' : for char i/p - to Store these Characters in Buffer 0:");
      000689 74r6F            [12] 1724 	mov	a,#___str_31
      00068B C0 E0            [24] 1725 	push	acc
      00068D 74s05            [12] 1726 	mov	a,#(___str_31 >> 8)
      00068F C0 E0            [24] 1727 	push	acc
      000691 12r00r00         [24] 1728 	lcall	_printf_tiny
      000694 15 81            [12] 1729 	dec	sp
      000696 15 81            [12] 1730 	dec	sp
                                   1731 ;	main.c:279: printf_tiny("\n\r ---------------------------------------------------------------------------\n\r ");
      000698 74rBA            [12] 1732 	mov	a,#___str_32
      00069A C0 E0            [24] 1733 	push	acc
      00069C 74s05            [12] 1734 	mov	a,#(___str_32 >> 8)
      00069E C0 E0            [24] 1735 	push	acc
      0006A0 12r00r00         [24] 1736 	lcall	_printf_tiny
      0006A3 15 81            [12] 1737 	dec	sp
      0006A5 15 81            [12] 1738 	dec	sp
      0006A7 D0 06            [24] 1739 	pop	ar6
      0006A9 D0 07            [24] 1740 	pop	ar7
                                   1741 ;	main.c:280: break;
      0006AB 02r04r5C         [24] 1742 	ljmp	00154$
                                   1743 ;	main.c:293: case '+':
      0006AE                       1744 00121$:
                                   1745 ;	main.c:296: printf("\n\r   To create new buffer, \n\r Enter buffer size between 30 to 300 bytes\t:");
      0006AE C0 07            [24] 1746 	push	ar7
      0006B0 C0 06            [24] 1747 	push	ar6
      0006B2 74r0C            [12] 1748 	mov	a,#___str_33
      0006B4 C0 E0            [24] 1749 	push	acc
      0006B6 74s06            [12] 1750 	mov	a,#(___str_33 >> 8)
      0006B8 C0 E0            [24] 1751 	push	acc
      0006BA 74 80            [12] 1752 	mov	a,#0x80
      0006BC C0 E0            [24] 1753 	push	acc
      0006BE 12r00r00         [24] 1754 	lcall	_printf
      0006C1 15 81            [12] 1755 	dec	sp
      0006C3 15 81            [12] 1756 	dec	sp
      0006C5 15 81            [12] 1757 	dec	sp
                                   1758 ;	main.c:299: uint16_t bsize = get_num(); //nbytes
      0006C7 12r00r3D         [24] 1759 	lcall	_get_num
      0006CA AA 82            [24] 1760 	mov	r2,dpl
      0006CC AB 83            [24] 1761 	mov	r3,dph
      0006CE D0 06            [24] 1762 	pop	ar6
      0006D0 D0 07            [24] 1763 	pop	ar7
                                   1764 ;	main.c:303: if (bsize > 30 && bsize < 300)
      0006D2 8A 00            [24] 1765 	mov	ar0,r2
      0006D4 8B 01            [24] 1766 	mov	ar1,r3
      0006D6 C3               [12] 1767 	clr	c
      0006D7 74 1E            [12] 1768 	mov	a,#0x1e
      0006D9 98               [12] 1769 	subb	a,r0
      0006DA E4               [12] 1770 	clr	a
      0006DB 99               [12] 1771 	subb	a,r1
      0006DC 40 03            [24] 1772 	jc	00339$
      0006DE 02r04r5C         [24] 1773 	ljmp	00154$
      0006E1                       1774 00339$:
      0006E1 8A 00            [24] 1775 	mov	ar0,r2
      0006E3 8B 01            [24] 1776 	mov	ar1,r3
      0006E5 C3               [12] 1777 	clr	c
      0006E6 E8               [12] 1778 	mov	a,r0
      0006E7 94 2C            [12] 1779 	subb	a,#0x2c
      0006E9 E9               [12] 1780 	mov	a,r1
      0006EA 94 01            [12] 1781 	subb	a,#0x01
      0006EC 40 03            [24] 1782 	jc	00340$
      0006EE 02r04r5C         [24] 1783 	ljmp	00154$
      0006F1                       1784 00340$:
                                   1785 ;	main.c:305: buff[n_buff] = (uint8_t * ) malloc(bsize); //allocate m/r for
      0006F1 C0 06            [24] 1786 	push	ar6
      0006F3 C0 07            [24] 1787 	push	ar7
      0006F5 90r00r00         [24] 1788 	mov	dptr,#__mulint_PARM_2
      0006F8 E5*07            [12] 1789 	mov	a,_main_sloc3_1_0
      0006FA F0               [24] 1790 	movx	@dptr,a
      0006FB E5*08            [12] 1791 	mov	a,(_main_sloc3_1_0 + 1)
      0006FD A3               [24] 1792 	inc	dptr
      0006FE F0               [24] 1793 	movx	@dptr,a
      0006FF 90 00 03         [24] 1794 	mov	dptr,#0x0003
      000702 C0 07            [24] 1795 	push	ar7
      000704 C0 06            [24] 1796 	push	ar6
      000706 C0 03            [24] 1797 	push	ar3
      000708 C0 02            [24] 1798 	push	ar2
      00070A 12r00r00         [24] 1799 	lcall	__mulint
      00070D A8 82            [24] 1800 	mov	r0,dpl
      00070F A9 83            [24] 1801 	mov	r1,dph
      000711 D0 02            [24] 1802 	pop	ar2
      000713 D0 03            [24] 1803 	pop	ar3
      000715 D0 06            [24] 1804 	pop	ar6
      000717 D0 07            [24] 1805 	pop	ar7
      000719 E8               [12] 1806 	mov	a,r0
      00071A 24r8F            [12] 1807 	add	a,#_main_buff_65536_76
      00071C F5*03            [12] 1808 	mov	_main_sloc1_1_0,a
      00071E E9               [12] 1809 	mov	a,r1
      00071F 34s13            [12] 1810 	addc	a,#(_main_buff_65536_76 >> 8)
      000721 F5*04            [12] 1811 	mov	(_main_sloc1_1_0 + 1),a
      000723 8A 82            [24] 1812 	mov	dpl,r2
      000725 8B 83            [24] 1813 	mov	dph,r3
      000727 C0 03            [24] 1814 	push	ar3
      000729 C0 02            [24] 1815 	push	ar2
      00072B 12r00r00         [24] 1816 	lcall	_malloc
      00072E AE 82            [24] 1817 	mov	r6,dpl
      000730 AF 83            [24] 1818 	mov	r7,dph
      000732 D0 02            [24] 1819 	pop	ar2
      000734 D0 03            [24] 1820 	pop	ar3
      000736 8E*00            [24] 1821 	mov	_main_sloc0_1_0,r6
      000738 8F*01            [24] 1822 	mov	(_main_sloc0_1_0 + 1),r7
      00073A 75*02 00         [24] 1823 	mov	(_main_sloc0_1_0 + 2),#0x00
      00073D 85*03 82         [24] 1824 	mov	dpl,_main_sloc1_1_0
      000740 85*04 83         [24] 1825 	mov	dph,(_main_sloc1_1_0 + 1)
      000743 E5*00            [12] 1826 	mov	a,_main_sloc0_1_0
      000745 F0               [24] 1827 	movx	@dptr,a
      000746 E5*01            [12] 1828 	mov	a,(_main_sloc0_1_0 + 1)
      000748 A3               [24] 1829 	inc	dptr
      000749 F0               [24] 1830 	movx	@dptr,a
      00074A E5*02            [12] 1831 	mov	a,(_main_sloc0_1_0 + 2)
      00074C A3               [24] 1832 	inc	dptr
      00074D F0               [24] 1833 	movx	@dptr,a
                                   1834 ;	main.c:307: start_addr[n_buff] = (int) buff[n_buff];
      00074E E5*07            [12] 1835 	mov	a,_main_sloc3_1_0
      000750 25*07            [12] 1836 	add	a,_main_sloc3_1_0
      000752 F5*05            [12] 1837 	mov	_main_sloc2_1_0,a
      000754 E5*08            [12] 1838 	mov	a,(_main_sloc3_1_0 + 1)
      000756 33               [12] 1839 	rlc	a
      000757 F5*06            [12] 1840 	mov	(_main_sloc2_1_0 + 1),a
      000759 E5*05            [12] 1841 	mov	a,_main_sloc2_1_0
      00075B 24rE9            [12] 1842 	add	a,#_main_start_addr_65536_76
      00075D F5 82            [12] 1843 	mov	dpl,a
      00075F E5*06            [12] 1844 	mov	a,(_main_sloc2_1_0 + 1)
      000761 34s13            [12] 1845 	addc	a,#(_main_start_addr_65536_76 >> 8)
      000763 F5 83            [12] 1846 	mov	dph,a
      000765 A9*00            [24] 1847 	mov	r1,_main_sloc0_1_0
      000767 AE*01            [24] 1848 	mov	r6,(_main_sloc0_1_0 + 1)
      000769 E9               [12] 1849 	mov	a,r1
      00076A F0               [24] 1850 	movx	@dptr,a
      00076B EE               [12] 1851 	mov	a,r6
      00076C A3               [24] 1852 	inc	dptr
      00076D F0               [24] 1853 	movx	@dptr,a
                                   1854 ;	main.c:308: end_addr[n_buff] = (int)(buff[n_buff] + bsize);
      00076E E5*05            [12] 1855 	mov	a,_main_sloc2_1_0
      000770 24r25            [12] 1856 	add	a,#_main_end_addr_65536_76
      000772 F5 82            [12] 1857 	mov	dpl,a
      000774 E5*06            [12] 1858 	mov	a,(_main_sloc2_1_0 + 1)
      000776 34s14            [12] 1859 	addc	a,#(_main_end_addr_65536_76 >> 8)
      000778 F5 83            [12] 1860 	mov	dph,a
      00077A EA               [12] 1861 	mov	a,r2
      00077B 25*00            [12] 1862 	add	a,_main_sloc0_1_0
      00077D F9               [12] 1863 	mov	r1,a
      00077E EB               [12] 1864 	mov	a,r3
      00077F 35*01            [12] 1865 	addc	a,(_main_sloc0_1_0 + 1)
      000781 FE               [12] 1866 	mov	r6,a
      000782 E9               [12] 1867 	mov	a,r1
      000783 F0               [24] 1868 	movx	@dptr,a
      000784 EE               [12] 1869 	mov	a,r6
      000785 A3               [24] 1870 	inc	dptr
      000786 F0               [24] 1871 	movx	@dptr,a
                                   1872 ;	main.c:310: b_size[n_buff] = bsize;              //total allocated buffer size
      000787 E5*05            [12] 1873 	mov	a,_main_sloc2_1_0
      000789 24r61            [12] 1874 	add	a,#_main_b_size_65536_76
      00078B F5 82            [12] 1875 	mov	dpl,a
      00078D E5*06            [12] 1876 	mov	a,(_main_sloc2_1_0 + 1)
      00078F 34s14            [12] 1877 	addc	a,#(_main_b_size_65536_76 >> 8)
      000791 F5 83            [12] 1878 	mov	dph,a
      000793 EA               [12] 1879 	mov	a,r2
      000794 F0               [24] 1880 	movx	@dptr,a
      000795 EB               [12] 1881 	mov	a,r3
      000796 A3               [24] 1882 	inc	dptr
      000797 F0               [24] 1883 	movx	@dptr,a
                                   1884 ;	main.c:311: n_storedC[n_buff] = 0;        //no. of storage characters
      000798 E5*05            [12] 1885 	mov	a,_main_sloc2_1_0
      00079A 24r9D            [12] 1886 	add	a,#_main_n_storedC_65536_76
      00079C FE               [12] 1887 	mov	r6,a
      00079D E5*06            [12] 1888 	mov	a,(_main_sloc2_1_0 + 1)
      00079F 34s14            [12] 1889 	addc	a,#(_main_n_storedC_65536_76 >> 8)
      0007A1 FF               [12] 1890 	mov	r7,a
      0007A2 8E 82            [24] 1891 	mov	dpl,r6
      0007A4 8F 83            [24] 1892 	mov	dph,r7
      0007A6 E4               [12] 1893 	clr	a
      0007A7 F0               [24] 1894 	movx	@dptr,a
      0007A8 A3               [24] 1895 	inc	dptr
      0007A9 F0               [24] 1896 	movx	@dptr,a
                                   1897 ;	main.c:312: n_Fspace[n_buff] = bsize - n_storedC[n_buff]; //no of free bytes in buffer
      0007AA E5*05            [12] 1898 	mov	a,_main_sloc2_1_0
      0007AC 24rD9            [12] 1899 	add	a,#_main_n_Fspace_65536_76
      0007AE F8               [12] 1900 	mov	r0,a
      0007AF E5*06            [12] 1901 	mov	a,(_main_sloc2_1_0 + 1)
      0007B1 34s14            [12] 1902 	addc	a,#(_main_n_Fspace_65536_76 >> 8)
      0007B3 F9               [12] 1903 	mov	r1,a
      0007B4 8E 82            [24] 1904 	mov	dpl,r6
      0007B6 8F 83            [24] 1905 	mov	dph,r7
      0007B8 E0               [24] 1906 	movx	a,@dptr
      0007B9 FE               [12] 1907 	mov	r6,a
      0007BA A3               [24] 1908 	inc	dptr
      0007BB E0               [24] 1909 	movx	a,@dptr
      0007BC FF               [12] 1910 	mov	r7,a
      0007BD EA               [12] 1911 	mov	a,r2
      0007BE C3               [12] 1912 	clr	c
      0007BF 9E               [12] 1913 	subb	a,r6
      0007C0 FA               [12] 1914 	mov	r2,a
      0007C1 EB               [12] 1915 	mov	a,r3
      0007C2 9F               [12] 1916 	subb	a,r7
      0007C3 FB               [12] 1917 	mov	r3,a
      0007C4 88 82            [24] 1918 	mov	dpl,r0
      0007C6 89 83            [24] 1919 	mov	dph,r1
      0007C8 EA               [12] 1920 	mov	a,r2
      0007C9 F0               [24] 1921 	movx	@dptr,a
      0007CA EB               [12] 1922 	mov	a,r3
      0007CB A3               [24] 1923 	inc	dptr
      0007CC F0               [24] 1924 	movx	@dptr,a
                                   1925 ;	main.c:314: printf_tiny("\n\r  malloc successful for buffer[%d]", n_buff);
      0007CD C0 07            [24] 1926 	push	ar7
      0007CF C0 06            [24] 1927 	push	ar6
      0007D1 C0*07            [24] 1928 	push	_main_sloc3_1_0
      0007D3 C0*08            [24] 1929 	push	(_main_sloc3_1_0 + 1)
      0007D5 74r56            [12] 1930 	mov	a,#___str_34
      0007D7 C0 E0            [24] 1931 	push	acc
      0007D9 74s06            [12] 1932 	mov	a,#(___str_34 >> 8)
      0007DB C0 E0            [24] 1933 	push	acc
      0007DD 12r00r00         [24] 1934 	lcall	_printf_tiny
      0007E0 E5 81            [12] 1935 	mov	a,sp
      0007E2 24 FC            [12] 1936 	add	a,#0xfc
      0007E4 F5 81            [12] 1937 	mov	sp,a
      0007E6 D0 06            [24] 1938 	pop	ar6
      0007E8 D0 07            [24] 1939 	pop	ar7
                                   1940 ;	main.c:315: printf("\n\r   Address of buffer[%d]: %p", n_buff, buff[n_buff]);
      0007EA 85*03 82         [24] 1941 	mov	dpl,_main_sloc1_1_0
      0007ED 85*04 83         [24] 1942 	mov	dph,(_main_sloc1_1_0 + 1)
      0007F0 E0               [24] 1943 	movx	a,@dptr
      0007F1 FB               [12] 1944 	mov	r3,a
      0007F2 A3               [24] 1945 	inc	dptr
      0007F3 E0               [24] 1946 	movx	a,@dptr
      0007F4 FE               [12] 1947 	mov	r6,a
      0007F5 A3               [24] 1948 	inc	dptr
      0007F6 E0               [24] 1949 	movx	a,@dptr
      0007F7 FF               [12] 1950 	mov	r7,a
      0007F8 C0 07            [24] 1951 	push	ar7
      0007FA C0 06            [24] 1952 	push	ar6
      0007FC C0 03            [24] 1953 	push	ar3
      0007FE C0 06            [24] 1954 	push	ar6
      000800 C0 07            [24] 1955 	push	ar7
      000802 C0*07            [24] 1956 	push	_main_sloc3_1_0
      000804 C0*08            [24] 1957 	push	(_main_sloc3_1_0 + 1)
      000806 74r7B            [12] 1958 	mov	a,#___str_35
      000808 C0 E0            [24] 1959 	push	acc
      00080A 74s06            [12] 1960 	mov	a,#(___str_35 >> 8)
      00080C C0 E0            [24] 1961 	push	acc
      00080E 74 80            [12] 1962 	mov	a,#0x80
      000810 C0 E0            [24] 1963 	push	acc
      000812 12r00r00         [24] 1964 	lcall	_printf
      000815 E5 81            [12] 1965 	mov	a,sp
      000817 24 F8            [12] 1966 	add	a,#0xf8
      000819 F5 81            [12] 1967 	mov	sp,a
      00081B D0 06            [24] 1968 	pop	ar6
      00081D D0 07            [24] 1969 	pop	ar7
                                   1970 ;	main.c:316: n_buff++;
      00081F 05*07            [12] 1971 	inc	_main_sloc3_1_0
      000821 E4               [12] 1972 	clr	a
      000822 B5*07 02         [24] 1973 	cjne	a,_main_sloc3_1_0,00341$
      000825 05*08            [12] 1974 	inc	(_main_sloc3_1_0 + 1)
      000827                       1975 00341$:
                                   1976 ;	main.c:318: break;
      000827 D0 07            [24] 1977 	pop	ar7
      000829 D0 06            [24] 1978 	pop	ar6
      00082B 02r04r5C         [24] 1979 	ljmp	00154$
                                   1980 ;	main.c:331: case '-':
      00082E                       1981 00125$:
                                   1982 ;	main.c:333: printf("\n\r   Enter buffer number you want to clear.");
      00082E C0 07            [24] 1983 	push	ar7
      000830 C0 06            [24] 1984 	push	ar6
      000832 74r9A            [12] 1985 	mov	a,#___str_36
      000834 C0 E0            [24] 1986 	push	acc
      000836 74s06            [12] 1987 	mov	a,#(___str_36 >> 8)
      000838 C0 E0            [24] 1988 	push	acc
      00083A 74 80            [12] 1989 	mov	a,#0x80
      00083C C0 E0            [24] 1990 	push	acc
      00083E 12r00r00         [24] 1991 	lcall	_printf
      000841 15 81            [12] 1992 	dec	sp
      000843 15 81            [12] 1993 	dec	sp
      000845 15 81            [12] 1994 	dec	sp
                                   1995 ;	main.c:334: uint16_t buff_number = get_num();
      000847 12r00r3D         [24] 1996 	lcall	_get_num
      00084A AA 82            [24] 1997 	mov	r2,dpl
      00084C AB 83            [24] 1998 	mov	r3,dph
      00084E D0 06            [24] 1999 	pop	ar6
      000850 D0 07            [24] 2000 	pop	ar7
                                   2001 ;	main.c:335: if ((buff_number <= n_buff) && (buff_number != 0))
      000852 8A 00            [24] 2002 	mov	ar0,r2
      000854 8B 01            [24] 2003 	mov	ar1,r3
      000856 C3               [12] 2004 	clr	c
      000857 E5*07            [12] 2005 	mov	a,_main_sloc3_1_0
      000859 98               [12] 2006 	subb	a,r0
      00085A E5*08            [12] 2007 	mov	a,(_main_sloc3_1_0 + 1)
      00085C 99               [12] 2008 	subb	a,r1
      00085D 50 03            [24] 2009 	jnc	00342$
      00085F 02r08rF6         [24] 2010 	ljmp	00127$
      000862                       2011 00342$:
      000862 EA               [12] 2012 	mov	a,r2
      000863 4B               [12] 2013 	orl	a,r3
      000864 70 03            [24] 2014 	jnz	00343$
      000866 02r08rF6         [24] 2015 	ljmp	00127$
      000869                       2016 00343$:
                                   2017 ;	main.c:337: free(buff[buff_number]);
      000869 C0 06            [24] 2018 	push	ar6
      00086B C0 07            [24] 2019 	push	ar7
      00086D 90r00r00         [24] 2020 	mov	dptr,#__mulint_PARM_2
      000870 EA               [12] 2021 	mov	a,r2
      000871 F0               [24] 2022 	movx	@dptr,a
      000872 EB               [12] 2023 	mov	a,r3
      000873 A3               [24] 2024 	inc	dptr
      000874 F0               [24] 2025 	movx	@dptr,a
      000875 90 00 03         [24] 2026 	mov	dptr,#0x0003
      000878 C0 07            [24] 2027 	push	ar7
      00087A C0 06            [24] 2028 	push	ar6
      00087C C0 03            [24] 2029 	push	ar3
      00087E C0 02            [24] 2030 	push	ar2
      000880 12r00r00         [24] 2031 	lcall	__mulint
      000883 A8 82            [24] 2032 	mov	r0,dpl
      000885 A9 83            [24] 2033 	mov	r1,dph
      000887 D0 02            [24] 2034 	pop	ar2
      000889 D0 03            [24] 2035 	pop	ar3
      00088B D0 06            [24] 2036 	pop	ar6
      00088D D0 07            [24] 2037 	pop	ar7
      00088F E8               [12] 2038 	mov	a,r0
      000890 24r8F            [12] 2039 	add	a,#_main_buff_65536_76
      000892 F5 82            [12] 2040 	mov	dpl,a
      000894 E9               [12] 2041 	mov	a,r1
      000895 34s13            [12] 2042 	addc	a,#(_main_buff_65536_76 >> 8)
      000897 F5 83            [12] 2043 	mov	dph,a
      000899 E0               [24] 2044 	movx	a,@dptr
      00089A F8               [12] 2045 	mov	r0,a
      00089B A3               [24] 2046 	inc	dptr
      00089C E0               [24] 2047 	movx	a,@dptr
      00089D F9               [12] 2048 	mov	r1,a
      00089E A3               [24] 2049 	inc	dptr
      00089F E0               [24] 2050 	movx	a,@dptr
      0008A0 FF               [12] 2051 	mov	r7,a
      0008A1 88 82            [24] 2052 	mov	dpl,r0
      0008A3 89 83            [24] 2053 	mov	dph,r1
      0008A5 8F F0            [24] 2054 	mov	b,r7
      0008A7 C0 07            [24] 2055 	push	ar7
      0008A9 C0 06            [24] 2056 	push	ar6
      0008AB C0 03            [24] 2057 	push	ar3
      0008AD C0 02            [24] 2058 	push	ar2
      0008AF 12r00r00         [24] 2059 	lcall	_free
      0008B2 D0 02            [24] 2060 	pop	ar2
      0008B4 D0 03            [24] 2061 	pop	ar3
      0008B6 D0 06            [24] 2062 	pop	ar6
      0008B8 D0 07            [24] 2063 	pop	ar7
                                   2064 ;	main.c:338: start_addr[buff_number] = 0;
      0008BA EA               [12] 2065 	mov	a,r2
      0008BB 2A               [12] 2066 	add	a,r2
      0008BC FE               [12] 2067 	mov	r6,a
      0008BD EB               [12] 2068 	mov	a,r3
      0008BE 33               [12] 2069 	rlc	a
      0008BF FF               [12] 2070 	mov	r7,a
      0008C0 EE               [12] 2071 	mov	a,r6
      0008C1 24rE9            [12] 2072 	add	a,#_main_start_addr_65536_76
      0008C3 F5 82            [12] 2073 	mov	dpl,a
      0008C5 EF               [12] 2074 	mov	a,r7
      0008C6 34s13            [12] 2075 	addc	a,#(_main_start_addr_65536_76 >> 8)
      0008C8 F5 83            [12] 2076 	mov	dph,a
      0008CA E4               [12] 2077 	clr	a
      0008CB F0               [24] 2078 	movx	@dptr,a
      0008CC A3               [24] 2079 	inc	dptr
      0008CD F0               [24] 2080 	movx	@dptr,a
                                   2081 ;	main.c:339: printf("\n\r  Buffer %d Cleared", buff_number);
      0008CE C0 07            [24] 2082 	push	ar7
      0008D0 C0 06            [24] 2083 	push	ar6
      0008D2 C0 02            [24] 2084 	push	ar2
      0008D4 C0 03            [24] 2085 	push	ar3
      0008D6 74rC6            [12] 2086 	mov	a,#___str_37
      0008D8 C0 E0            [24] 2087 	push	acc
      0008DA 74s06            [12] 2088 	mov	a,#(___str_37 >> 8)
      0008DC C0 E0            [24] 2089 	push	acc
      0008DE 74 80            [12] 2090 	mov	a,#0x80
      0008E0 C0 E0            [24] 2091 	push	acc
      0008E2 12r00r00         [24] 2092 	lcall	_printf
      0008E5 E5 81            [12] 2093 	mov	a,sp
      0008E7 24 FB            [12] 2094 	add	a,#0xfb
      0008E9 F5 81            [12] 2095 	mov	sp,a
      0008EB D0 06            [24] 2096 	pop	ar6
      0008ED D0 07            [24] 2097 	pop	ar7
      0008EF D0 07            [24] 2098 	pop	ar7
      0008F1 D0 06            [24] 2099 	pop	ar6
      0008F3 02r04r5C         [24] 2100 	ljmp	00154$
      0008F6                       2101 00127$:
                                   2102 ;	main.c:343: printf("\n\r  Please enter correct buffer number,You have entered a wrong Buffer number");
      0008F6 C0 07            [24] 2103 	push	ar7
      0008F8 C0 06            [24] 2104 	push	ar6
      0008FA 74rDC            [12] 2105 	mov	a,#___str_38
      0008FC C0 E0            [24] 2106 	push	acc
      0008FE 74s06            [12] 2107 	mov	a,#(___str_38 >> 8)
      000900 C0 E0            [24] 2108 	push	acc
      000902 74 80            [12] 2109 	mov	a,#0x80
      000904 C0 E0            [24] 2110 	push	acc
      000906 12r00r00         [24] 2111 	lcall	_printf
      000909 15 81            [12] 2112 	dec	sp
      00090B 15 81            [12] 2113 	dec	sp
      00090D 15 81            [12] 2114 	dec	sp
      00090F D0 06            [24] 2115 	pop	ar6
      000911 D0 07            [24] 2116 	pop	ar7
                                   2117 ;	main.c:345: break;
      000913 02r04r5C         [24] 2118 	ljmp	00154$
                                   2119 ;	main.c:377: case '?':
      000916                       2120 00130$:
                                   2121 ;	main.c:378: DEBUGPORT(0xD0);//for virtual port
      000916 75 82 D0         [24] 2122 	mov	dpl,#0xd0
      000919 C0 07            [24] 2123 	push	ar7
      00091B C0 06            [24] 2124 	push	ar6
      00091D 12r00r00         [24] 2125 	lcall	_dataout
                                   2126 ;	main.c:381: printf("\n \r   ------------       Heap Report     ----------------\n");
      000920 74r2A            [12] 2127 	mov	a,#___str_39
      000922 C0 E0            [24] 2128 	push	acc
      000924 74s07            [12] 2129 	mov	a,#(___str_39 >> 8)
      000926 C0 E0            [24] 2130 	push	acc
      000928 74 80            [12] 2131 	mov	a,#0x80
      00092A C0 E0            [24] 2132 	push	acc
      00092C 12r00r00         [24] 2133 	lcall	_printf
      00092F 15 81            [12] 2134 	dec	sp
      000931 15 81            [12] 2135 	dec	sp
      000933 15 81            [12] 2136 	dec	sp
                                   2137 ;	main.c:383: printf("\n\r B_N    : Buffer Number");
      000935 74r65            [12] 2138 	mov	a,#___str_40
      000937 C0 E0            [24] 2139 	push	acc
      000939 74s07            [12] 2140 	mov	a,#(___str_40 >> 8)
      00093B C0 E0            [24] 2141 	push	acc
      00093D 74 80            [12] 2142 	mov	a,#0x80
      00093F C0 E0            [24] 2143 	push	acc
      000941 12r00r00         [24] 2144 	lcall	_printf
      000944 15 81            [12] 2145 	dec	sp
      000946 15 81            [12] 2146 	dec	sp
      000948 15 81            [12] 2147 	dec	sp
                                   2148 ;	main.c:384: printf("\n\r St_addr: Buffer Start Address");
      00094A 74r7F            [12] 2149 	mov	a,#___str_41
      00094C C0 E0            [24] 2150 	push	acc
      00094E 74s07            [12] 2151 	mov	a,#(___str_41 >> 8)
      000950 C0 E0            [24] 2152 	push	acc
      000952 74 80            [12] 2153 	mov	a,#0x80
      000954 C0 E0            [24] 2154 	push	acc
      000956 12r00r00         [24] 2155 	lcall	_printf
      000959 15 81            [12] 2156 	dec	sp
      00095B 15 81            [12] 2157 	dec	sp
      00095D 15 81            [12] 2158 	dec	sp
                                   2159 ;	main.c:385: printf("\n\r E_Addr : Buffer End Address");
      00095F 74rA0            [12] 2160 	mov	a,#___str_42
      000961 C0 E0            [24] 2161 	push	acc
      000963 74s07            [12] 2162 	mov	a,#(___str_42 >> 8)
      000965 C0 E0            [24] 2163 	push	acc
      000967 74 80            [12] 2164 	mov	a,#0x80
      000969 C0 E0            [24] 2165 	push	acc
      00096B 12r00r00         [24] 2166 	lcall	_printf
      00096E 15 81            [12] 2167 	dec	sp
      000970 15 81            [12] 2168 	dec	sp
      000972 15 81            [12] 2169 	dec	sp
                                   2170 ;	main.c:386: printf("\n\r B_Size : Allocated Buffer Size");   //Allocated size of the buffer
      000974 74rBF            [12] 2171 	mov	a,#___str_43
      000976 C0 E0            [24] 2172 	push	acc
      000978 74s07            [12] 2173 	mov	a,#(___str_43 >> 8)
      00097A C0 E0            [24] 2174 	push	acc
      00097C 74 80            [12] 2175 	mov	a,#0x80
      00097E C0 E0            [24] 2176 	push	acc
      000980 12r00r00         [24] 2177 	lcall	_printf
      000983 15 81            [12] 2178 	dec	sp
      000985 15 81            [12] 2179 	dec	sp
      000987 15 81            [12] 2180 	dec	sp
                                   2181 ;	main.c:387: printf("\n\r N_StoC : No. of Storage Chars in buffer");//Number of storage chars in the buffer
      000989 74rE1            [12] 2182 	mov	a,#___str_44
      00098B C0 E0            [24] 2183 	push	acc
      00098D 74s07            [12] 2184 	mov	a,#(___str_44 >> 8)
      00098F C0 E0            [24] 2185 	push	acc
      000991 74 80            [12] 2186 	mov	a,#0x80
      000993 C0 E0            [24] 2187 	push	acc
      000995 12r00r00         [24] 2188 	lcall	_printf
      000998 15 81            [12] 2189 	dec	sp
      00099A 15 81            [12] 2190 	dec	sp
      00099C 15 81            [12] 2191 	dec	sp
                                   2192 ;	main.c:388: printf("\n\r N_FSpace: No. Free Space in buffer\n\r");// number of free bytes remaining in the buffer
      00099E 74r0C            [12] 2193 	mov	a,#___str_45
      0009A0 C0 E0            [24] 2194 	push	acc
      0009A2 74s08            [12] 2195 	mov	a,#(___str_45 >> 8)
      0009A4 C0 E0            [24] 2196 	push	acc
      0009A6 74 80            [12] 2197 	mov	a,#0x80
      0009A8 C0 E0            [24] 2198 	push	acc
      0009AA 12r00r00         [24] 2199 	lcall	_printf
      0009AD 15 81            [12] 2200 	dec	sp
      0009AF 15 81            [12] 2201 	dec	sp
      0009B1 15 81            [12] 2202 	dec	sp
                                   2203 ;	main.c:390: printf("\n\r B_N \t St_addr  E_Addr  B_Size  N_StoC  N_FSpace \n\r");
      0009B3 74r34            [12] 2204 	mov	a,#___str_46
      0009B5 C0 E0            [24] 2205 	push	acc
      0009B7 74s08            [12] 2206 	mov	a,#(___str_46 >> 8)
      0009B9 C0 E0            [24] 2207 	push	acc
      0009BB 74 80            [12] 2208 	mov	a,#0x80
      0009BD C0 E0            [24] 2209 	push	acc
      0009BF 12r00r00         [24] 2210 	lcall	_printf
      0009C2 15 81            [12] 2211 	dec	sp
      0009C4 15 81            [12] 2212 	dec	sp
      0009C6 15 81            [12] 2213 	dec	sp
      0009C8 D0 06            [24] 2214 	pop	ar6
      0009CA D0 07            [24] 2215 	pop	ar7
                                   2216 ;	main.c:392: for(i= 0; i < n_buff; i++)
      0009CC AA*07            [24] 2217 	mov	r2,_main_sloc3_1_0
      0009CE AB*08            [24] 2218 	mov	r3,(_main_sloc3_1_0 + 1)
      0009D0 78 00            [12] 2219 	mov	r0,#0x00
      0009D2 79 00            [12] 2220 	mov	r1,#0x00
      0009D4                       2221 00160$:
      0009D4 C0 06            [24] 2222 	push	ar6
      0009D6 C0 07            [24] 2223 	push	ar7
      0009D8 88 06            [24] 2224 	mov	ar6,r0
      0009DA 89 07            [24] 2225 	mov	ar7,r1
      0009DC C3               [12] 2226 	clr	c
      0009DD EE               [12] 2227 	mov	a,r6
      0009DE 9A               [12] 2228 	subb	a,r2
      0009DF EF               [12] 2229 	mov	a,r7
      0009E0 9B               [12] 2230 	subb	a,r3
      0009E1 D0 07            [24] 2231 	pop	ar7
      0009E3 D0 06            [24] 2232 	pop	ar6
      0009E5 40 03            [24] 2233 	jc	00344$
      0009E7 02r0ArAB         [24] 2234 	ljmp	00133$
      0009EA                       2235 00344$:
                                   2236 ;	main.c:394: if(start_addr[i] != 0)
      0009EA E8               [12] 2237 	mov	a,r0
      0009EB 28               [12] 2238 	add	a,r0
      0009EC F5*05            [12] 2239 	mov	_main_sloc2_1_0,a
      0009EE E9               [12] 2240 	mov	a,r1
      0009EF 33               [12] 2241 	rlc	a
      0009F0 F5*06            [12] 2242 	mov	(_main_sloc2_1_0 + 1),a
      0009F2 E5*05            [12] 2243 	mov	a,_main_sloc2_1_0
      0009F4 24rE9            [12] 2244 	add	a,#_main_start_addr_65536_76
      0009F6 F5 82            [12] 2245 	mov	dpl,a
      0009F8 E5*06            [12] 2246 	mov	a,(_main_sloc2_1_0 + 1)
      0009FA 34s13            [12] 2247 	addc	a,#(_main_start_addr_65536_76 >> 8)
      0009FC F5 83            [12] 2248 	mov	dph,a
      0009FE E0               [24] 2249 	movx	a,@dptr
      0009FF F5*03            [12] 2250 	mov	_main_sloc1_1_0,a
      000A01 A3               [24] 2251 	inc	dptr
      000A02 E0               [24] 2252 	movx	a,@dptr
      000A03 F5*04            [12] 2253 	mov	(_main_sloc1_1_0 + 1),a
      000A05 E5*03            [12] 2254 	mov	a,_main_sloc1_1_0
      000A07 45*04            [12] 2255 	orl	a,(_main_sloc1_1_0 + 1)
      000A09 70 03            [24] 2256 	jnz	00345$
      000A0B 02r0ArA3         [24] 2257 	ljmp	00161$
      000A0E                       2258 00345$:
                                   2259 ;	main.c:396: printf("\n\r %d\t 0x0%x\t 0x0%x\t  %d\t  %d\t\t %d\n\r", i, start_addr[i], end_addr[i], b_size[i], n_storedC[i], n_Fspace[i]);
      000A0E C0 06            [24] 2260 	push	ar6
      000A10 C0 07            [24] 2261 	push	ar7
      000A12 E5*05            [12] 2262 	mov	a,_main_sloc2_1_0
      000A14 24rD9            [12] 2263 	add	a,#_main_n_Fspace_65536_76
      000A16 F5 82            [12] 2264 	mov	dpl,a
      000A18 E5*06            [12] 2265 	mov	a,(_main_sloc2_1_0 + 1)
      000A1A 34s14            [12] 2266 	addc	a,#(_main_n_Fspace_65536_76 >> 8)
      000A1C F5 83            [12] 2267 	mov	dph,a
      000A1E E0               [24] 2268 	movx	a,@dptr
      000A1F FE               [12] 2269 	mov	r6,a
      000A20 A3               [24] 2270 	inc	dptr
      000A21 E0               [24] 2271 	movx	a,@dptr
      000A22 FF               [12] 2272 	mov	r7,a
      000A23 E5*05            [12] 2273 	mov	a,_main_sloc2_1_0
      000A25 24r9D            [12] 2274 	add	a,#_main_n_storedC_65536_76
      000A27 F5 82            [12] 2275 	mov	dpl,a
      000A29 E5*06            [12] 2276 	mov	a,(_main_sloc2_1_0 + 1)
      000A2B 34s14            [12] 2277 	addc	a,#(_main_n_storedC_65536_76 >> 8)
      000A2D F5 83            [12] 2278 	mov	dph,a
      000A2F E0               [24] 2279 	movx	a,@dptr
      000A30 F5*00            [12] 2280 	mov	_main_sloc0_1_0,a
      000A32 A3               [24] 2281 	inc	dptr
      000A33 E0               [24] 2282 	movx	a,@dptr
      000A34 F5*01            [12] 2283 	mov	(_main_sloc0_1_0 + 1),a
      000A36 E5*05            [12] 2284 	mov	a,_main_sloc2_1_0
      000A38 24r61            [12] 2285 	add	a,#_main_b_size_65536_76
      000A3A F5 82            [12] 2286 	mov	dpl,a
      000A3C E5*06            [12] 2287 	mov	a,(_main_sloc2_1_0 + 1)
      000A3E 34s14            [12] 2288 	addc	a,#(_main_b_size_65536_76 >> 8)
      000A40 F5 83            [12] 2289 	mov	dph,a
      000A42 E0               [24] 2290 	movx	a,@dptr
      000A43 F5*09            [12] 2291 	mov	_main_sloc4_1_0,a
      000A45 A3               [24] 2292 	inc	dptr
      000A46 E0               [24] 2293 	movx	a,@dptr
      000A47 F5*0A            [12] 2294 	mov	(_main_sloc4_1_0 + 1),a
      000A49 E5*05            [12] 2295 	mov	a,_main_sloc2_1_0
      000A4B 24r25            [12] 2296 	add	a,#_main_end_addr_65536_76
      000A4D F5 82            [12] 2297 	mov	dpl,a
      000A4F E5*06            [12] 2298 	mov	a,(_main_sloc2_1_0 + 1)
      000A51 34s14            [12] 2299 	addc	a,#(_main_end_addr_65536_76 >> 8)
      000A53 F5 83            [12] 2300 	mov	dph,a
      000A55 E0               [24] 2301 	movx	a,@dptr
      000A56 FC               [12] 2302 	mov	r4,a
      000A57 A3               [24] 2303 	inc	dptr
      000A58 E0               [24] 2304 	movx	a,@dptr
      000A59 FD               [12] 2305 	mov	r5,a
      000A5A C0 07            [24] 2306 	push	ar7
      000A5C C0 06            [24] 2307 	push	ar6
      000A5E C0 03            [24] 2308 	push	ar3
      000A60 C0 02            [24] 2309 	push	ar2
      000A62 C0 01            [24] 2310 	push	ar1
      000A64 C0 00            [24] 2311 	push	ar0
      000A66 C0 06            [24] 2312 	push	ar6
      000A68 C0 07            [24] 2313 	push	ar7
      000A6A C0*00            [24] 2314 	push	_main_sloc0_1_0
      000A6C C0*01            [24] 2315 	push	(_main_sloc0_1_0 + 1)
      000A6E C0*09            [24] 2316 	push	_main_sloc4_1_0
      000A70 C0*0A            [24] 2317 	push	(_main_sloc4_1_0 + 1)
      000A72 C0 04            [24] 2318 	push	ar4
      000A74 C0 05            [24] 2319 	push	ar5
      000A76 C0*03            [24] 2320 	push	_main_sloc1_1_0
      000A78 C0*04            [24] 2321 	push	(_main_sloc1_1_0 + 1)
      000A7A C0 00            [24] 2322 	push	ar0
      000A7C C0 01            [24] 2323 	push	ar1
      000A7E 74r6A            [12] 2324 	mov	a,#___str_47
      000A80 C0 E0            [24] 2325 	push	acc
      000A82 74s08            [12] 2326 	mov	a,#(___str_47 >> 8)
      000A84 C0 E0            [24] 2327 	push	acc
      000A86 74 80            [12] 2328 	mov	a,#0x80
      000A88 C0 E0            [24] 2329 	push	acc
      000A8A 12r00r00         [24] 2330 	lcall	_printf
      000A8D E5 81            [12] 2331 	mov	a,sp
      000A8F 24 F1            [12] 2332 	add	a,#0xf1
      000A91 F5 81            [12] 2333 	mov	sp,a
      000A93 D0 00            [24] 2334 	pop	ar0
      000A95 D0 01            [24] 2335 	pop	ar1
      000A97 D0 02            [24] 2336 	pop	ar2
      000A99 D0 03            [24] 2337 	pop	ar3
      000A9B D0 06            [24] 2338 	pop	ar6
      000A9D D0 07            [24] 2339 	pop	ar7
                                   2340 ;	main.c:473: }
      000A9F D0 07            [24] 2341 	pop	ar7
      000AA1 D0 06            [24] 2342 	pop	ar6
                                   2343 ;	main.c:396: printf("\n\r %d\t 0x0%x\t 0x0%x\t  %d\t  %d\t\t %d\n\r", i, start_addr[i], end_addr[i], b_size[i], n_storedC[i], n_Fspace[i]);
      000AA3                       2344 00161$:
                                   2345 ;	main.c:392: for(i= 0; i < n_buff; i++)
      000AA3 08               [12] 2346 	inc	r0
      000AA4 B8 00 01         [24] 2347 	cjne	r0,#0x00,00346$
      000AA7 09               [12] 2348 	inc	r1
      000AA8                       2349 00346$:
      000AA8 02r09rD4         [24] 2350 	ljmp	00160$
      000AAB                       2351 00133$:
                                   2352 ;	main.c:399: printf("\n\r  Number of storage characters currently in buffer 0 --> %d \n \r  ", n_rbytes_after_q);// Total no. of characters after ? sign
      000AAB C0 07            [24] 2353 	push	ar7
      000AAD C0 06            [24] 2354 	push	ar6
      000AAF 90r15r19         [24] 2355 	mov	dptr,#_main_n_rbytes_after_q_65536_76
      000AB2 E0               [24] 2356 	movx	a,@dptr
      000AB3 C0 E0            [24] 2357 	push	acc
      000AB5 A3               [24] 2358 	inc	dptr
      000AB6 E0               [24] 2359 	movx	a,@dptr
      000AB7 C0 E0            [24] 2360 	push	acc
      000AB9 74r8F            [12] 2361 	mov	a,#___str_48
      000ABB C0 E0            [24] 2362 	push	acc
      000ABD 74s08            [12] 2363 	mov	a,#(___str_48 >> 8)
      000ABF C0 E0            [24] 2364 	push	acc
      000AC1 74 80            [12] 2365 	mov	a,#0x80
      000AC3 C0 E0            [24] 2366 	push	acc
      000AC5 12r00r00         [24] 2367 	lcall	_printf
      000AC8 E5 81            [12] 2368 	mov	a,sp
      000ACA 24 FB            [12] 2369 	add	a,#0xfb
      000ACC F5 81            [12] 2370 	mov	sp,a
                                   2371 ;	main.c:400: n_rbytes_after_q = 0;
      000ACE 90r15r19         [24] 2372 	mov	dptr,#_main_n_rbytes_after_q_65536_76
      000AD1 E4               [12] 2373 	clr	a
      000AD2 F0               [24] 2374 	movx	@dptr,a
      000AD3 A3               [24] 2375 	inc	dptr
      000AD4 F0               [24] 2376 	movx	@dptr,a
                                   2377 ;	main.c:402: printf("\n\r  Data in Buffer 0: \t");
      000AD5 74rD3            [12] 2378 	mov	a,#___str_49
      000AD7 C0 E0            [24] 2379 	push	acc
      000AD9 74s08            [12] 2380 	mov	a,#(___str_49 >> 8)
      000ADB C0 E0            [24] 2381 	push	acc
      000ADD 74 80            [12] 2382 	mov	a,#0x80
      000ADF C0 E0            [24] 2383 	push	acc
      000AE1 12r00r00         [24] 2384 	lcall	_printf
      000AE4 15 81            [12] 2385 	dec	sp
      000AE6 15 81            [12] 2386 	dec	sp
      000AE8 15 81            [12] 2387 	dec	sp
      000AEA D0 06            [24] 2388 	pop	ar6
      000AEC D0 07            [24] 2389 	pop	ar7
                                   2390 ;	main.c:403: for (j = 0; j < nstored_bytes; j++)
      000AEE 90r15r17         [24] 2391 	mov	dptr,#_main_nstored_bytes_65536_76
      000AF1 E0               [24] 2392 	movx	a,@dptr
      000AF2 FC               [12] 2393 	mov	r4,a
      000AF3 A3               [24] 2394 	inc	dptr
      000AF4 E0               [24] 2395 	movx	a,@dptr
      000AF5 FD               [12] 2396 	mov	r5,a
      000AF6 7A 00            [12] 2397 	mov	r2,#0x00
      000AF8 7B 00            [12] 2398 	mov	r3,#0x00
      000AFA                       2399 00163$:
      000AFA 8A 00            [24] 2400 	mov	ar0,r2
      000AFC 8B 01            [24] 2401 	mov	ar1,r3
      000AFE C3               [12] 2402 	clr	c
      000AFF E8               [12] 2403 	mov	a,r0
      000B00 9C               [12] 2404 	subb	a,r4
      000B01 E9               [12] 2405 	mov	a,r1
      000B02 9D               [12] 2406 	subb	a,r5
      000B03 40 03            [24] 2407 	jc	00347$
      000B05 02r0BrC4         [24] 2408 	ljmp	00136$
      000B08                       2409 00347$:
                                   2410 ;	main.c:405: if(j % 64 == 0)
      000B08 90r00r00         [24] 2411 	mov	dptr,#__modsint_PARM_2
      000B0B 74 40            [12] 2412 	mov	a,#0x40
      000B0D F0               [24] 2413 	movx	@dptr,a
      000B0E E4               [12] 2414 	clr	a
      000B0F A3               [24] 2415 	inc	dptr
      000B10 F0               [24] 2416 	movx	@dptr,a
      000B11 8A 82            [24] 2417 	mov	dpl,r2
      000B13 8B 83            [24] 2418 	mov	dph,r3
      000B15 C0 07            [24] 2419 	push	ar7
      000B17 C0 06            [24] 2420 	push	ar6
      000B19 C0 05            [24] 2421 	push	ar5
      000B1B C0 04            [24] 2422 	push	ar4
      000B1D C0 03            [24] 2423 	push	ar3
      000B1F C0 02            [24] 2424 	push	ar2
      000B21 12r00r00         [24] 2425 	lcall	__modsint
      000B24 E5 82            [12] 2426 	mov	a,dpl
      000B26 85 83 F0         [24] 2427 	mov	b,dph
      000B29 D0 02            [24] 2428 	pop	ar2
      000B2B D0 03            [24] 2429 	pop	ar3
      000B2D D0 04            [24] 2430 	pop	ar4
      000B2F D0 05            [24] 2431 	pop	ar5
      000B31 D0 06            [24] 2432 	pop	ar6
      000B33 D0 07            [24] 2433 	pop	ar7
      000B35 45 F0            [12] 2434 	orl	a,b
      000B37 70 2D            [24] 2435 	jnz	00135$
                                   2436 ;	main.c:407: printf("\n\r");
      000B39 C0 07            [24] 2437 	push	ar7
      000B3B C0 06            [24] 2438 	push	ar6
      000B3D C0 05            [24] 2439 	push	ar5
      000B3F C0 04            [24] 2440 	push	ar4
      000B41 C0 03            [24] 2441 	push	ar3
      000B43 C0 02            [24] 2442 	push	ar2
      000B45 74rEB            [12] 2443 	mov	a,#___str_50
      000B47 C0 E0            [24] 2444 	push	acc
      000B49 74s08            [12] 2445 	mov	a,#(___str_50 >> 8)
      000B4B C0 E0            [24] 2446 	push	acc
      000B4D 74 80            [12] 2447 	mov	a,#0x80
      000B4F C0 E0            [24] 2448 	push	acc
      000B51 12r00r00         [24] 2449 	lcall	_printf
      000B54 15 81            [12] 2450 	dec	sp
      000B56 15 81            [12] 2451 	dec	sp
      000B58 15 81            [12] 2452 	dec	sp
      000B5A D0 02            [24] 2453 	pop	ar2
      000B5C D0 03            [24] 2454 	pop	ar3
      000B5E D0 04            [24] 2455 	pop	ar4
      000B60 D0 05            [24] 2456 	pop	ar5
      000B62 D0 06            [24] 2457 	pop	ar6
      000B64 D0 07            [24] 2458 	pop	ar7
      000B66                       2459 00135$:
                                   2460 ;	main.c:409: printf("%c  ", *(buff[0] + j));
      000B66 C0 06            [24] 2461 	push	ar6
      000B68 C0 07            [24] 2462 	push	ar7
      000B6A 90r13r8F         [24] 2463 	mov	dptr,#_main_buff_65536_76
      000B6D E0               [24] 2464 	movx	a,@dptr
      000B6E F8               [12] 2465 	mov	r0,a
      000B6F A3               [24] 2466 	inc	dptr
      000B70 E0               [24] 2467 	movx	a,@dptr
      000B71 F9               [12] 2468 	mov	r1,a
      000B72 A3               [24] 2469 	inc	dptr
      000B73 E0               [24] 2470 	movx	a,@dptr
      000B74 FF               [12] 2471 	mov	r7,a
      000B75 EA               [12] 2472 	mov	a,r2
      000B76 28               [12] 2473 	add	a,r0
      000B77 F8               [12] 2474 	mov	r0,a
      000B78 EB               [12] 2475 	mov	a,r3
      000B79 39               [12] 2476 	addc	a,r1
      000B7A F9               [12] 2477 	mov	r1,a
      000B7B 88 82            [24] 2478 	mov	dpl,r0
      000B7D 89 83            [24] 2479 	mov	dph,r1
      000B7F 8F F0            [24] 2480 	mov	b,r7
      000B81 12r00r00         [24] 2481 	lcall	__gptrget
      000B84 F8               [12] 2482 	mov	r0,a
      000B85 7F 00            [12] 2483 	mov	r7,#0x00
      000B87 C0 07            [24] 2484 	push	ar7
      000B89 C0 06            [24] 2485 	push	ar6
      000B8B C0 05            [24] 2486 	push	ar5
      000B8D C0 04            [24] 2487 	push	ar4
      000B8F C0 03            [24] 2488 	push	ar3
      000B91 C0 02            [24] 2489 	push	ar2
      000B93 C0 00            [24] 2490 	push	ar0
      000B95 C0 07            [24] 2491 	push	ar7
      000B97 74rEE            [12] 2492 	mov	a,#___str_51
      000B99 C0 E0            [24] 2493 	push	acc
      000B9B 74s08            [12] 2494 	mov	a,#(___str_51 >> 8)
      000B9D C0 E0            [24] 2495 	push	acc
      000B9F 74 80            [12] 2496 	mov	a,#0x80
      000BA1 C0 E0            [24] 2497 	push	acc
      000BA3 12r00r00         [24] 2498 	lcall	_printf
      000BA6 E5 81            [12] 2499 	mov	a,sp
      000BA8 24 FB            [12] 2500 	add	a,#0xfb
      000BAA F5 81            [12] 2501 	mov	sp,a
      000BAC D0 02            [24] 2502 	pop	ar2
      000BAE D0 03            [24] 2503 	pop	ar3
      000BB0 D0 04            [24] 2504 	pop	ar4
      000BB2 D0 05            [24] 2505 	pop	ar5
      000BB4 D0 06            [24] 2506 	pop	ar6
      000BB6 D0 07            [24] 2507 	pop	ar7
                                   2508 ;	main.c:403: for (j = 0; j < nstored_bytes; j++)
      000BB8 0A               [12] 2509 	inc	r2
      000BB9 BA 00 01         [24] 2510 	cjne	r2,#0x00,00349$
      000BBC 0B               [12] 2511 	inc	r3
      000BBD                       2512 00349$:
      000BBD D0 07            [24] 2513 	pop	ar7
      000BBF D0 06            [24] 2514 	pop	ar6
      000BC1 02r0ArFA         [24] 2515 	ljmp	00163$
      000BC4                       2516 00136$:
                                   2517 ;	main.c:411: nstored_bytes = 0;   //after received ? nstorage bytes = 0
      000BC4 90r15r17         [24] 2518 	mov	dptr,#_main_nstored_bytes_65536_76
      000BC7 E4               [12] 2519 	clr	a
      000BC8 F0               [24] 2520 	movx	@dptr,a
      000BC9 A3               [24] 2521 	inc	dptr
      000BCA F0               [24] 2522 	movx	@dptr,a
                                   2523 ;	main.c:412: printf("\n \r   -----------------------------------------------------\n\r");
      000BCB C0 07            [24] 2524 	push	ar7
      000BCD C0 06            [24] 2525 	push	ar6
      000BCF 74rF3            [12] 2526 	mov	a,#___str_52
      000BD1 C0 E0            [24] 2527 	push	acc
      000BD3 74s08            [12] 2528 	mov	a,#(___str_52 >> 8)
      000BD5 C0 E0            [24] 2529 	push	acc
      000BD7 74 80            [12] 2530 	mov	a,#0x80
      000BD9 C0 E0            [24] 2531 	push	acc
      000BDB 12r00r00         [24] 2532 	lcall	_printf
      000BDE 15 81            [12] 2533 	dec	sp
      000BE0 15 81            [12] 2534 	dec	sp
      000BE2 15 81            [12] 2535 	dec	sp
      000BE4 D0 06            [24] 2536 	pop	ar6
      000BE6 D0 07            [24] 2537 	pop	ar7
                                   2538 ;	main.c:413: break;
      000BE8 02r04r5C         [24] 2539 	ljmp	00154$
                                   2540 ;	main.c:425: case '=':
      000BEB                       2541 00137$:
                                   2542 ;	main.c:427: if(nstored_bytes>0)   //Printing Buffer 0 only if content in it
      000BEB 90r15r17         [24] 2543 	mov	dptr,#_main_nstored_bytes_65536_76
      000BEE E0               [24] 2544 	movx	a,@dptr
      000BEF FC               [12] 2545 	mov	r4,a
      000BF0 A3               [24] 2546 	inc	dptr
      000BF1 E0               [24] 2547 	movx	a,@dptr
      000BF2 FD               [12] 2548 	mov	r5,a
      000BF3 90r15r17         [24] 2549 	mov	dptr,#_main_nstored_bytes_65536_76
      000BF6 E0               [24] 2550 	movx	a,@dptr
      000BF7 F5 F0            [12] 2551 	mov	b,a
      000BF9 A3               [24] 2552 	inc	dptr
      000BFA E0               [24] 2553 	movx	a,@dptr
      000BFB 45 F0            [12] 2554 	orl	a,b
      000BFD 60 27            [24] 2555 	jz	00139$
                                   2556 ;	main.c:429: printf("\n\r   -------------- Displaying current content of buffer_0 --------------\n\r");
      000BFF C0 07            [24] 2557 	push	ar7
      000C01 C0 06            [24] 2558 	push	ar6
      000C03 C0 05            [24] 2559 	push	ar5
      000C05 C0 04            [24] 2560 	push	ar4
      000C07 74r31            [12] 2561 	mov	a,#___str_53
      000C09 C0 E0            [24] 2562 	push	acc
      000C0B 74s09            [12] 2563 	mov	a,#(___str_53 >> 8)
      000C0D C0 E0            [24] 2564 	push	acc
      000C0F 74 80            [12] 2565 	mov	a,#0x80
      000C11 C0 E0            [24] 2566 	push	acc
      000C13 12r00r00         [24] 2567 	lcall	_printf
      000C16 15 81            [12] 2568 	dec	sp
      000C18 15 81            [12] 2569 	dec	sp
      000C1A 15 81            [12] 2570 	dec	sp
      000C1C D0 04            [24] 2571 	pop	ar4
      000C1E D0 05            [24] 2572 	pop	ar5
      000C20 D0 06            [24] 2573 	pop	ar6
      000C22 D0 07            [24] 2574 	pop	ar7
      000C24 80 25            [24] 2575 	sjmp	00205$
      000C26                       2576 00139$:
                                   2577 ;	main.c:433: printf("\n\r Buffer 0 is empty:\n\r");
      000C26 C0 07            [24] 2578 	push	ar7
      000C28 C0 06            [24] 2579 	push	ar6
      000C2A C0 05            [24] 2580 	push	ar5
      000C2C C0 04            [24] 2581 	push	ar4
      000C2E 74r7D            [12] 2582 	mov	a,#___str_54
      000C30 C0 E0            [24] 2583 	push	acc
      000C32 74s09            [12] 2584 	mov	a,#(___str_54 >> 8)
      000C34 C0 E0            [24] 2585 	push	acc
      000C36 74 80            [12] 2586 	mov	a,#0x80
      000C38 C0 E0            [24] 2587 	push	acc
      000C3A 12r00r00         [24] 2588 	lcall	_printf
      000C3D 15 81            [12] 2589 	dec	sp
      000C3F 15 81            [12] 2590 	dec	sp
      000C41 15 81            [12] 2591 	dec	sp
      000C43 D0 04            [24] 2592 	pop	ar4
      000C45 D0 05            [24] 2593 	pop	ar5
      000C47 D0 06            [24] 2594 	pop	ar6
      000C49 D0 07            [24] 2595 	pop	ar7
                                   2596 ;	main.c:436: for(k = 0; k < nstored_bytes; k++)
      000C4B                       2597 00205$:
      000C4B 7A 00            [12] 2598 	mov	r2,#0x00
      000C4D 7B 00            [12] 2599 	mov	r3,#0x00
      000C4F                       2600 00166$:
      000C4F 8A 00            [24] 2601 	mov	ar0,r2
      000C51 8B 01            [24] 2602 	mov	ar1,r3
      000C53 C3               [12] 2603 	clr	c
      000C54 E8               [12] 2604 	mov	a,r0
      000C55 9C               [12] 2605 	subb	a,r4
      000C56 E9               [12] 2606 	mov	a,r1
      000C57 9D               [12] 2607 	subb	a,r5
      000C58 40 03            [24] 2608 	jc	00351$
      000C5A 02r0Dr38         [24] 2609 	ljmp	00143$
      000C5D                       2610 00351$:
                                   2611 ;	main.c:438: if(k % 16 == 0)
      000C5D 90r00r00         [24] 2612 	mov	dptr,#__modsint_PARM_2
      000C60 74 10            [12] 2613 	mov	a,#0x10
      000C62 F0               [24] 2614 	movx	@dptr,a
      000C63 E4               [12] 2615 	clr	a
      000C64 A3               [24] 2616 	inc	dptr
      000C65 F0               [24] 2617 	movx	@dptr,a
      000C66 8A 82            [24] 2618 	mov	dpl,r2
      000C68 8B 83            [24] 2619 	mov	dph,r3
      000C6A C0 07            [24] 2620 	push	ar7
      000C6C C0 06            [24] 2621 	push	ar6
      000C6E C0 05            [24] 2622 	push	ar5
      000C70 C0 04            [24] 2623 	push	ar4
      000C72 C0 03            [24] 2624 	push	ar3
      000C74 C0 02            [24] 2625 	push	ar2
      000C76 12r00r00         [24] 2626 	lcall	__modsint
      000C79 E5 82            [12] 2627 	mov	a,dpl
      000C7B 85 83 F0         [24] 2628 	mov	b,dph
      000C7E D0 02            [24] 2629 	pop	ar2
      000C80 D0 03            [24] 2630 	pop	ar3
      000C82 D0 04            [24] 2631 	pop	ar4
      000C84 D0 05            [24] 2632 	pop	ar5
      000C86 D0 06            [24] 2633 	pop	ar6
      000C88 D0 07            [24] 2634 	pop	ar7
      000C8A 45 F0            [12] 2635 	orl	a,b
      000C8C 70 4C            [24] 2636 	jnz	00142$
                                   2637 ;	main.c:440: printf("\n\r   %p :", (buff[0] + k));    //print address after every 16 bytes
      000C8E C0 06            [24] 2638 	push	ar6
      000C90 C0 07            [24] 2639 	push	ar7
      000C92 90r13r8F         [24] 2640 	mov	dptr,#_main_buff_65536_76
      000C95 E0               [24] 2641 	movx	a,@dptr
      000C96 F8               [12] 2642 	mov	r0,a
      000C97 A3               [24] 2643 	inc	dptr
      000C98 E0               [24] 2644 	movx	a,@dptr
      000C99 F9               [12] 2645 	mov	r1,a
      000C9A A3               [24] 2646 	inc	dptr
      000C9B E0               [24] 2647 	movx	a,@dptr
      000C9C FF               [12] 2648 	mov	r7,a
      000C9D EA               [12] 2649 	mov	a,r2
      000C9E 28               [12] 2650 	add	a,r0
      000C9F F8               [12] 2651 	mov	r0,a
      000CA0 EB               [12] 2652 	mov	a,r3
      000CA1 39               [12] 2653 	addc	a,r1
      000CA2 F9               [12] 2654 	mov	r1,a
      000CA3 C0 07            [24] 2655 	push	ar7
      000CA5 C0 06            [24] 2656 	push	ar6
      000CA7 C0 05            [24] 2657 	push	ar5
      000CA9 C0 04            [24] 2658 	push	ar4
      000CAB C0 03            [24] 2659 	push	ar3
      000CAD C0 02            [24] 2660 	push	ar2
      000CAF C0 00            [24] 2661 	push	ar0
      000CB1 C0 01            [24] 2662 	push	ar1
      000CB3 C0 07            [24] 2663 	push	ar7
      000CB5 74r95            [12] 2664 	mov	a,#___str_55
      000CB7 C0 E0            [24] 2665 	push	acc
      000CB9 74s09            [12] 2666 	mov	a,#(___str_55 >> 8)
      000CBB C0 E0            [24] 2667 	push	acc
      000CBD 74 80            [12] 2668 	mov	a,#0x80
      000CBF C0 E0            [24] 2669 	push	acc
      000CC1 12r00r00         [24] 2670 	lcall	_printf
      000CC4 E5 81            [12] 2671 	mov	a,sp
      000CC6 24 FA            [12] 2672 	add	a,#0xfa
      000CC8 F5 81            [12] 2673 	mov	sp,a
      000CCA D0 02            [24] 2674 	pop	ar2
      000CCC D0 03            [24] 2675 	pop	ar3
      000CCE D0 04            [24] 2676 	pop	ar4
      000CD0 D0 05            [24] 2677 	pop	ar5
      000CD2 D0 06            [24] 2678 	pop	ar6
      000CD4 D0 07            [24] 2679 	pop	ar7
                                   2680 ;	main.c:473: }
      000CD6 D0 07            [24] 2681 	pop	ar7
      000CD8 D0 06            [24] 2682 	pop	ar6
                                   2683 ;	main.c:440: printf("\n\r   %p :", (buff[0] + k));    //print address after every 16 bytes
      000CDA                       2684 00142$:
                                   2685 ;	main.c:442: printf("%x ", *(buff[0] + k));    //display data on PC in hexadecimal
      000CDA C0 06            [24] 2686 	push	ar6
      000CDC C0 07            [24] 2687 	push	ar7
      000CDE 90r13r8F         [24] 2688 	mov	dptr,#_main_buff_65536_76
      000CE1 E0               [24] 2689 	movx	a,@dptr
      000CE2 F8               [12] 2690 	mov	r0,a
      000CE3 A3               [24] 2691 	inc	dptr
      000CE4 E0               [24] 2692 	movx	a,@dptr
      000CE5 F9               [12] 2693 	mov	r1,a
      000CE6 A3               [24] 2694 	inc	dptr
      000CE7 E0               [24] 2695 	movx	a,@dptr
      000CE8 FF               [12] 2696 	mov	r7,a
      000CE9 EA               [12] 2697 	mov	a,r2
      000CEA 28               [12] 2698 	add	a,r0
      000CEB F8               [12] 2699 	mov	r0,a
      000CEC EB               [12] 2700 	mov	a,r3
      000CED 39               [12] 2701 	addc	a,r1
      000CEE F9               [12] 2702 	mov	r1,a
      000CEF 88 82            [24] 2703 	mov	dpl,r0
      000CF1 89 83            [24] 2704 	mov	dph,r1
      000CF3 8F F0            [24] 2705 	mov	b,r7
      000CF5 12r00r00         [24] 2706 	lcall	__gptrget
      000CF8 F8               [12] 2707 	mov	r0,a
      000CF9 7F 00            [12] 2708 	mov	r7,#0x00
      000CFB C0 07            [24] 2709 	push	ar7
      000CFD C0 06            [24] 2710 	push	ar6
      000CFF C0 05            [24] 2711 	push	ar5
      000D01 C0 04            [24] 2712 	push	ar4
      000D03 C0 03            [24] 2713 	push	ar3
      000D05 C0 02            [24] 2714 	push	ar2
      000D07 C0 00            [24] 2715 	push	ar0
      000D09 C0 07            [24] 2716 	push	ar7
      000D0B 74r9F            [12] 2717 	mov	a,#___str_56
      000D0D C0 E0            [24] 2718 	push	acc
      000D0F 74s09            [12] 2719 	mov	a,#(___str_56 >> 8)
      000D11 C0 E0            [24] 2720 	push	acc
      000D13 74 80            [12] 2721 	mov	a,#0x80
      000D15 C0 E0            [24] 2722 	push	acc
      000D17 12r00r00         [24] 2723 	lcall	_printf
      000D1A E5 81            [12] 2724 	mov	a,sp
      000D1C 24 FB            [12] 2725 	add	a,#0xfb
      000D1E F5 81            [12] 2726 	mov	sp,a
      000D20 D0 02            [24] 2727 	pop	ar2
      000D22 D0 03            [24] 2728 	pop	ar3
      000D24 D0 04            [24] 2729 	pop	ar4
      000D26 D0 05            [24] 2730 	pop	ar5
      000D28 D0 06            [24] 2731 	pop	ar6
      000D2A D0 07            [24] 2732 	pop	ar7
                                   2733 ;	main.c:436: for(k = 0; k < nstored_bytes; k++)
      000D2C 0A               [12] 2734 	inc	r2
      000D2D BA 00 01         [24] 2735 	cjne	r2,#0x00,00353$
      000D30 0B               [12] 2736 	inc	r3
      000D31                       2737 00353$:
      000D31 D0 07            [24] 2738 	pop	ar7
      000D33 D0 06            [24] 2739 	pop	ar6
      000D35 02r0Cr4F         [24] 2740 	ljmp	00166$
      000D38                       2741 00143$:
                                   2742 ;	main.c:444: printf("\n\r -------------------------------------------------\n\r");
      000D38 C0 07            [24] 2743 	push	ar7
      000D3A C0 06            [24] 2744 	push	ar6
      000D3C 74rA3            [12] 2745 	mov	a,#___str_57
      000D3E C0 E0            [24] 2746 	push	acc
      000D40 74s09            [12] 2747 	mov	a,#(___str_57 >> 8)
      000D42 C0 E0            [24] 2748 	push	acc
      000D44 74 80            [12] 2749 	mov	a,#0x80
      000D46 C0 E0            [24] 2750 	push	acc
      000D48 12r00r00         [24] 2751 	lcall	_printf
      000D4B 15 81            [12] 2752 	dec	sp
      000D4D 15 81            [12] 2753 	dec	sp
      000D4F 15 81            [12] 2754 	dec	sp
      000D51 D0 06            [24] 2755 	pop	ar6
      000D53 D0 07            [24] 2756 	pop	ar7
                                   2757 ;	main.c:446: break;
      000D55 02r04r5C         [24] 2758 	ljmp	00154$
                                   2759 ;	main.c:453: case '@': //to clear all the buffers
      000D58                       2760 00144$:
                                   2761 ;	main.c:455: free(buff[0]);
      000D58 90r13r8F         [24] 2762 	mov	dptr,#_main_buff_65536_76
      000D5B E0               [24] 2763 	movx	a,@dptr
      000D5C FB               [12] 2764 	mov	r3,a
      000D5D A3               [24] 2765 	inc	dptr
      000D5E E0               [24] 2766 	movx	a,@dptr
      000D5F FC               [12] 2767 	mov	r4,a
      000D60 A3               [24] 2768 	inc	dptr
      000D61 E0               [24] 2769 	movx	a,@dptr
      000D62 FD               [12] 2770 	mov	r5,a
      000D63 8B 82            [24] 2771 	mov	dpl,r3
      000D65 8C 83            [24] 2772 	mov	dph,r4
      000D67 8D F0            [24] 2773 	mov	b,r5
      000D69 C0 07            [24] 2774 	push	ar7
      000D6B C0 06            [24] 2775 	push	ar6
      000D6D 12r00r00         [24] 2776 	lcall	_free
      000D70 D0 06            [24] 2777 	pop	ar6
      000D72 D0 07            [24] 2778 	pop	ar7
                                   2779 ;	main.c:457: for(p = 0; p < n_buff; p++)
      000D74 AC*07            [24] 2780 	mov	r4,_main_sloc3_1_0
      000D76 AD*08            [24] 2781 	mov	r5,(_main_sloc3_1_0 + 1)
      000D78 7A 00            [12] 2782 	mov	r2,#0x00
      000D7A 7B 00            [12] 2783 	mov	r3,#0x00
      000D7C                       2784 00169$:
      000D7C 8A 00            [24] 2785 	mov	ar0,r2
      000D7E 8B 01            [24] 2786 	mov	ar1,r3
      000D80 C3               [12] 2787 	clr	c
      000D81 E8               [12] 2788 	mov	a,r0
      000D82 9C               [12] 2789 	subb	a,r4
      000D83 E9               [12] 2790 	mov	a,r1
      000D84 9D               [12] 2791 	subb	a,r5
      000D85 40 03            [24] 2792 	jc	00354$
      000D87 02r0Er3C         [24] 2793 	ljmp	00145$
      000D8A                       2794 00354$:
                                   2795 ;	main.c:459: free(buff[n_buff]);
      000D8A C0 06            [24] 2796 	push	ar6
      000D8C C0 07            [24] 2797 	push	ar7
      000D8E 90r00r00         [24] 2798 	mov	dptr,#__mulint_PARM_2
      000D91 EC               [12] 2799 	mov	a,r4
      000D92 F0               [24] 2800 	movx	@dptr,a
      000D93 ED               [12] 2801 	mov	a,r5
      000D94 A3               [24] 2802 	inc	dptr
      000D95 F0               [24] 2803 	movx	@dptr,a
      000D96 90 00 03         [24] 2804 	mov	dptr,#0x0003
      000D99 C0 07            [24] 2805 	push	ar7
      000D9B C0 06            [24] 2806 	push	ar6
      000D9D C0 05            [24] 2807 	push	ar5
      000D9F C0 04            [24] 2808 	push	ar4
      000DA1 C0 03            [24] 2809 	push	ar3
      000DA3 C0 02            [24] 2810 	push	ar2
      000DA5 12r00r00         [24] 2811 	lcall	__mulint
      000DA8 A8 82            [24] 2812 	mov	r0,dpl
      000DAA A9 83            [24] 2813 	mov	r1,dph
      000DAC D0 02            [24] 2814 	pop	ar2
      000DAE D0 03            [24] 2815 	pop	ar3
      000DB0 D0 04            [24] 2816 	pop	ar4
      000DB2 D0 05            [24] 2817 	pop	ar5
      000DB4 D0 06            [24] 2818 	pop	ar6
      000DB6 D0 07            [24] 2819 	pop	ar7
      000DB8 E8               [12] 2820 	mov	a,r0
      000DB9 24r8F            [12] 2821 	add	a,#_main_buff_65536_76
      000DBB F5 82            [12] 2822 	mov	dpl,a
      000DBD E9               [12] 2823 	mov	a,r1
      000DBE 34s13            [12] 2824 	addc	a,#(_main_buff_65536_76 >> 8)
      000DC0 F5 83            [12] 2825 	mov	dph,a
      000DC2 E0               [24] 2826 	movx	a,@dptr
      000DC3 F8               [12] 2827 	mov	r0,a
      000DC4 A3               [24] 2828 	inc	dptr
      000DC5 E0               [24] 2829 	movx	a,@dptr
      000DC6 F9               [12] 2830 	mov	r1,a
      000DC7 A3               [24] 2831 	inc	dptr
      000DC8 E0               [24] 2832 	movx	a,@dptr
      000DC9 FF               [12] 2833 	mov	r7,a
      000DCA 88 82            [24] 2834 	mov	dpl,r0
      000DCC 89 83            [24] 2835 	mov	dph,r1
      000DCE 8F F0            [24] 2836 	mov	b,r7
      000DD0 C0 07            [24] 2837 	push	ar7
      000DD2 C0 06            [24] 2838 	push	ar6
      000DD4 C0 05            [24] 2839 	push	ar5
      000DD6 C0 04            [24] 2840 	push	ar4
      000DD8 C0 03            [24] 2841 	push	ar3
      000DDA C0 02            [24] 2842 	push	ar2
      000DDC 12r00r00         [24] 2843 	lcall	_free
      000DDF D0 02            [24] 2844 	pop	ar2
      000DE1 D0 03            [24] 2845 	pop	ar3
      000DE3 D0 04            [24] 2846 	pop	ar4
      000DE5 D0 05            [24] 2847 	pop	ar5
      000DE7 D0 06            [24] 2848 	pop	ar6
      000DE9 D0 07            [24] 2849 	pop	ar7
                                   2850 ;	main.c:460: start_addr[p] = 0;
      000DEB EA               [12] 2851 	mov	a,r2
      000DEC 2A               [12] 2852 	add	a,r2
      000DED FE               [12] 2853 	mov	r6,a
      000DEE EB               [12] 2854 	mov	a,r3
      000DEF 33               [12] 2855 	rlc	a
      000DF0 FF               [12] 2856 	mov	r7,a
      000DF1 EE               [12] 2857 	mov	a,r6
      000DF2 24rE9            [12] 2858 	add	a,#_main_start_addr_65536_76
      000DF4 F5 82            [12] 2859 	mov	dpl,a
      000DF6 EF               [12] 2860 	mov	a,r7
      000DF7 34s13            [12] 2861 	addc	a,#(_main_start_addr_65536_76 >> 8)
      000DF9 F5 83            [12] 2862 	mov	dph,a
      000DFB E4               [12] 2863 	clr	a
      000DFC F0               [24] 2864 	movx	@dptr,a
      000DFD A3               [24] 2865 	inc	dptr
      000DFE F0               [24] 2866 	movx	@dptr,a
                                   2867 ;	main.c:461: printf("\n \r   Buffer %d Cleared \n", p);
      000DFF C0 07            [24] 2868 	push	ar7
      000E01 C0 06            [24] 2869 	push	ar6
      000E03 C0 05            [24] 2870 	push	ar5
      000E05 C0 04            [24] 2871 	push	ar4
      000E07 C0 03            [24] 2872 	push	ar3
      000E09 C0 02            [24] 2873 	push	ar2
      000E0B C0 02            [24] 2874 	push	ar2
      000E0D C0 03            [24] 2875 	push	ar3
      000E0F 74rDA            [12] 2876 	mov	a,#___str_58
      000E11 C0 E0            [24] 2877 	push	acc
      000E13 74s09            [12] 2878 	mov	a,#(___str_58 >> 8)
      000E15 C0 E0            [24] 2879 	push	acc
      000E17 74 80            [12] 2880 	mov	a,#0x80
      000E19 C0 E0            [24] 2881 	push	acc
      000E1B 12r00r00         [24] 2882 	lcall	_printf
      000E1E E5 81            [12] 2883 	mov	a,sp
      000E20 24 FB            [12] 2884 	add	a,#0xfb
      000E22 F5 81            [12] 2885 	mov	sp,a
      000E24 D0 02            [24] 2886 	pop	ar2
      000E26 D0 03            [24] 2887 	pop	ar3
      000E28 D0 04            [24] 2888 	pop	ar4
      000E2A D0 05            [24] 2889 	pop	ar5
      000E2C D0 06            [24] 2890 	pop	ar6
      000E2E D0 07            [24] 2891 	pop	ar7
                                   2892 ;	main.c:457: for(p = 0; p < n_buff; p++)
      000E30 0A               [12] 2893 	inc	r2
      000E31 BA 00 01         [24] 2894 	cjne	r2,#0x00,00355$
      000E34 0B               [12] 2895 	inc	r3
      000E35                       2896 00355$:
      000E35 D0 07            [24] 2897 	pop	ar7
      000E37 D0 06            [24] 2898 	pop	ar6
      000E39 02r0Dr7C         [24] 2899 	ljmp	00169$
      000E3C                       2900 00145$:
                                   2901 ;	main.c:463: printf_tiny("\n \r ----------------All Buffers Cleared--------------------------");
      000E3C C0 07            [24] 2902 	push	ar7
      000E3E C0 06            [24] 2903 	push	ar6
      000E40 74rF4            [12] 2904 	mov	a,#___str_59
      000E42 C0 E0            [24] 2905 	push	acc
      000E44 74s09            [12] 2906 	mov	a,#(___str_59 >> 8)
      000E46 C0 E0            [24] 2907 	push	acc
      000E48 12r00r00         [24] 2908 	lcall	_printf_tiny
      000E4B 15 81            [12] 2909 	dec	sp
      000E4D 15 81            [12] 2910 	dec	sp
                                   2911 ;	main.c:464: printf_tiny("\n \r -------------------------------------------------------------");
      000E4F 74r36            [12] 2912 	mov	a,#___str_60
      000E51 C0 E0            [24] 2913 	push	acc
      000E53 74s0A            [12] 2914 	mov	a,#(___str_60 >> 8)
      000E55 C0 E0            [24] 2915 	push	acc
      000E57 12r00r00         [24] 2916 	lcall	_printf_tiny
      000E5A 15 81            [12] 2917 	dec	sp
      000E5C 15 81            [12] 2918 	dec	sp
                                   2919 ;	main.c:465: main(); //start over from beginning
      000E5E 12r00rCD         [24] 2920 	lcall	_main
      000E61 D0 06            [24] 2921 	pop	ar6
      000E63 D0 07            [24] 2922 	pop	ar7
                                   2923 ;	main.c:467: default:
      000E65                       2924 00146$:
                                   2925 ;	main.c:469: printf_tiny("\n \r !!!!!---------Invalid command or char i/p-----------!!!!!");
      000E65 C0 07            [24] 2926 	push	ar7
      000E67 C0 06            [24] 2927 	push	ar6
      000E69 74r78            [12] 2928 	mov	a,#___str_61
      000E6B C0 E0            [24] 2929 	push	acc
      000E6D 74s0A            [12] 2930 	mov	a,#(___str_61 >> 8)
      000E6F C0 E0            [24] 2931 	push	acc
      000E71 12r00r00         [24] 2932 	lcall	_printf_tiny
      000E74 15 81            [12] 2933 	dec	sp
      000E76 15 81            [12] 2934 	dec	sp
                                   2935 ;	main.c:470: printf_tiny("\n \r Press '*' - for help - instruction for command and char input");
      000E78 74rB7            [12] 2936 	mov	a,#___str_20
      000E7A C0 E0            [24] 2937 	push	acc
      000E7C 74s03            [12] 2938 	mov	a,#(___str_20 >> 8)
      000E7E C0 E0            [24] 2939 	push	acc
      000E80 12r00r00         [24] 2940 	lcall	_printf_tiny
      000E83 15 81            [12] 2941 	dec	sp
      000E85 15 81            [12] 2942 	dec	sp
                                   2943 ;	main.c:471: printf_tiny("\n \r -------------------------------------------------------\n\r");
      000E87 74rB6            [12] 2944 	mov	a,#___str_62
      000E89 C0 E0            [24] 2945 	push	acc
      000E8B 74s0A            [12] 2946 	mov	a,#(___str_62 >> 8)
      000E8D C0 E0            [24] 2947 	push	acc
      000E8F 12r00r00         [24] 2948 	lcall	_printf_tiny
      000E92 15 81            [12] 2949 	dec	sp
      000E94 15 81            [12] 2950 	dec	sp
      000E96 D0 06            [24] 2951 	pop	ar6
      000E98 D0 07            [24] 2952 	pop	ar7
                                   2953 ;	main.c:473: }
                                   2954 ;	main.c:477: }
      000E9A 02r04r5C         [24] 2955 	ljmp	00154$
                                   2956 	.area CSEG    (CODE)
                                   2957 	.area CONST   (CODE)
      000000                       2958 ___sdcc_heap_size:
      000000 88 13                 2959 	.byte #0x88, #0x13	; 5000
                                   2960 	.area CONST   (CODE)
      000002                       2961 ___str_0:
      000002 0A                    2962 	.db 0x0a
      000003 20                    2963 	.ascii " "
      000004 0D                    2964 	.db 0x0d
      000005 20 20 2D 2D 2D 2D 2D  2965 	.ascii "  -------------        Welcome        --------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 20 20 20 20 20 20
             20 20 57 65 6C 63 6F
             6D 65 20 20 20 20 20
             20 20 20 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D
      000039 00                    2966 	.db 0x00
                                   2967 	.area CSEG    (CODE)
                                   2968 	.area CONST   (CODE)
      00003A                       2969 ___str_1:
      00003A 0A                    2970 	.db 0x0a
      00003B 20                    2971 	.ascii " "
      00003C 0D                    2972 	.db 0x0d
      00003D 20 20 20 20 20 20 20  2973 	.ascii "           Instruction for command and character input:"
             20 20 20 20 49 6E 73
             74 72 75 63 74 69 6F
             6E 20 66 6F 72 20 63
             6F 6D 6D 61 6E 64 20
             61 6E 64 20 63 68 61
             72 61 63 74 65 72 20
             69 6E 70 75 74 3A
      000074 00                    2974 	.db 0x00
                                   2975 	.area CSEG    (CODE)
                                   2976 	.area CONST   (CODE)
      000075                       2977 ___str_2:
      000075 0A                    2978 	.db 0x0a
      000076 20                    2979 	.ascii " "
      000077 0D                    2980 	.db 0x0d
      000078 20 45 6E 74 65 72 20  2981 	.ascii " Enter "
      00007F 0A                    2982 	.db 0x0a
      000080 0D                    2983 	.db 0x0d
      000081 3A                    2984 	.ascii ":"
      000082 00                    2985 	.db 0x00
                                   2986 	.area CSEG    (CODE)
                                   2987 	.area CONST   (CODE)
      000083                       2988 ___str_3:
      000083 0A                    2989 	.db 0x0a
      000084 20                    2990 	.ascii " "
      000085 0D                    2991 	.db 0x0d
      000086 20 20 20 20 20 27 2B  2992 	.ascii "     '+' : to Add a New Buffer:"
             27 20 3A 20 74 6F 20
             41 64 64 20 61 20 4E
             65 77 20 42 75 66 66
             65 72 3A
      0000A5 00                    2993 	.db 0x00
                                   2994 	.area CSEG    (CODE)
                                   2995 	.area CONST   (CODE)
      0000A6                       2996 ___str_4:
      0000A6 0A                    2997 	.db 0x0a
      0000A7 20                    2998 	.ascii " "
      0000A8 0D                    2999 	.db 0x0d
      0000A9 20 20 20 20 20 27 2D  3000 	.ascii "     '-' : to Clean a Buffer:"
             27 20 3A 20 74 6F 20
             43 6C 65 61 6E 20 61
             20 42 75 66 66 65 72
             3A
      0000C6 00                    3001 	.db 0x00
                                   3002 	.area CSEG    (CODE)
                                   3003 	.area CONST   (CODE)
      0000C7                       3004 ___str_5:
      0000C7 0A                    3005 	.db 0x0a
      0000C8 20                    3006 	.ascii " "
      0000C9 0D                    3007 	.db 0x0d
      0000CA 20 20 20 20 20 27 3F  3008 	.ascii "     '?' : to Display a Detailed Heap Report:"
             27 20 3A 20 74 6F 20
             44 69 73 70 6C 61 79
             20 61 20 44 65 74 61
             69 6C 65 64 20 48 65
             61 70 20 52 65 70 6F
             72 74 3A
      0000F7 00                    3009 	.db 0x00
                                   3010 	.area CSEG    (CODE)
                                   3011 	.area CONST   (CODE)
      0000F8                       3012 ___str_6:
      0000F8 0A                    3013 	.db 0x0a
      0000F9 20                    3014 	.ascii " "
      0000FA 0D                    3015 	.db 0x0d
      0000FB 20 20 20 20 20 27 40  3016 	.ascii "     '@' : to Clear all Buffers Data and Start Again:"
             27 20 3A 20 74 6F 20
             43 6C 65 61 72 20 61
             6C 6C 20 42 75 66 66
             65 72 73 20 44 61 74
             61 20 61 6E 64 20 53
             74 61 72 74 20 41 67
             61 69 6E 3A
      000130 00                    3017 	.db 0x00
                                   3018 	.area CSEG    (CODE)
                                   3019 	.area CONST   (CODE)
      000131                       3020 ___str_7:
      000131 0A                    3021 	.db 0x0a
      000132 20                    3022 	.ascii " "
      000133 0D                    3023 	.db 0x0d
      000134 20 20 20 20 20 27 3D  3024 	.ascii "     '=' : to Data printing of buffer"
             27 20 3A 20 74 6F 20
             44 61 74 61 20 70 72
             69 6E 74 69 6E 67 20
             6F 66 20 62 75 66 66
             65 72
      000159 00                    3025 	.db 0x00
                                   3026 	.area CSEG    (CODE)
                                   3027 	.area CONST   (CODE)
      00015A                       3028 ___str_8:
      00015A 0A                    3029 	.db 0x0a
      00015B 20                    3030 	.ascii " "
      00015C 0D                    3031 	.db 0x0d
      00015D 20 73 6D 61 6C 6C 20  3032 	.ascii " small 'a'-'z' : for char i/p - to Store these Characters in"
             27 61 27 2D 27 7A 27
             20 3A 20 66 6F 72 20
             63 68 61 72 20 69 2F
             70 20 2D 20 74 6F 20
             53 74 6F 72 65 20 74
             68 65 73 65 20 43 68
             61 72 61 63 74 65 72
             73 20 69 6E
      000199 20 42 75 66 66 65 72  3033 	.ascii " Buffer 0:"
             20 30 3A
      0001A3 00                    3034 	.db 0x00
                                   3035 	.area CSEG    (CODE)
                                   3036 	.area CONST   (CODE)
      0001A4                       3037 ___str_9:
      0001A4 0D                    3038 	.db 0x0d
      0001A5 0D                    3039 	.db 0x0d
      0001A6 20 2D 2D 2D 2D 2D 2D  3040 	.ascii " -----------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0001E2 2D 2D 2D 2D 2D 2D 2D  3041 	.ascii "------------"
             2D 2D 2D 2D 2D
      0001EE 0A                    3042 	.db 0x0a
      0001EF 0D                    3043 	.db 0x0d
      0001F0 00                    3044 	.db 0x00
                                   3045 	.area CSEG    (CODE)
                                   3046 	.area CONST   (CODE)
      0001F1                       3047 ___str_10:
      0001F1 0A                    3048 	.db 0x0a
      0001F2 0D                    3049 	.db 0x0d
      0001F3 20 45 6E 74 65 72 20  3050 	.ascii " Enter buffer size for buffer 0 & 1"
             62 75 66 66 65 72 20
             73 69 7A 65 20 66 6F
             72 20 62 75 66 66 65
             72 20 30 20 26 20 31
      000216 00                    3051 	.db 0x00
                                   3052 	.area CSEG    (CODE)
                                   3053 	.area CONST   (CODE)
      000217                       3054 ___str_11:
      000217 0A                    3055 	.db 0x0a
      000218 0D                    3056 	.db 0x0d
      000219 20 42 75 66 66 65 72  3057 	.ascii " Buffer size must be between [48 - 4800] bytes, & divisible "
             20 73 69 7A 65 20 6D
             75 73 74 20 62 65 20
             62 65 74 77 65 65 6E
             20 5B 34 38 20 2D 20
             34 38 30 30 5D 20 62
             79 74 65 73 2C 20 26
             20 64 69 76 69 73 69
             62 6C 65 20
      000255 62 79 20 31 36 20 3A  3058 	.ascii "by 16 :"
      00025C 00                    3059 	.db 0x00
                                   3060 	.area CSEG    (CODE)
                                   3061 	.area CONST   (CODE)
      00025D                       3062 ___str_12:
      00025D 0A                    3063 	.db 0x0a
      00025E 20                    3064 	.ascii " "
      00025F 0D                    3065 	.db 0x0d
      000260 20 20 50 6C 65 61 73  3066 	.ascii "  Please Enter valid buffer size according to Instruction"
             65 20 45 6E 74 65 72
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             73 69 7A 65 20 61 63
             63 6F 72 64 69 6E 67
             20 74 6F 20 49 6E 73
             74 72 75 63 74 69 6F
             6E
      000299 0A                    3067 	.db 0x0a
      00029A 0D                    3068 	.db 0x0d
      00029B 00                    3069 	.db 0x00
                                   3070 	.area CSEG    (CODE)
                                   3071 	.area CONST   (CODE)
      00029C                       3072 ___str_13:
      00029C 0A                    3073 	.db 0x0a
      00029D 20                    3074 	.ascii " "
      00029E 0D                    3075 	.db 0x0d
      00029F 20 20 44 4D 41 20 66  3076 	.ascii "  DMA for buffer0 failed"
             6F 72 20 62 75 66 66
             65 72 30 20 66 61 69
             6C 65 64
      0002B7 00                    3077 	.db 0x00
                                   3078 	.area CSEG    (CODE)
                                   3079 	.area CONST   (CODE)
      0002B8                       3080 ___str_14:
      0002B8 0A                    3081 	.db 0x0a
      0002B9 20                    3082 	.ascii " "
      0002BA 0D                    3083 	.db 0x0d
      0002BB 20 6D 61 6C 6C 6F 63  3084 	.ascii " malloc successful, %d B D M/r for buffer allocated"
             20 73 75 63 63 65 73
             73 66 75 6C 2C 20 25
             64 20 42 20 44 20 4D
             2F 72 20 66 6F 72 20
             62 75 66 66 65 72 20
             61 6C 6C 6F 63 61 74
             65 64
      0002EE 00                    3085 	.db 0x00
                                   3086 	.area CSEG    (CODE)
                                   3087 	.area CONST   (CODE)
      0002EF                       3088 ___str_15:
      0002EF 0A                    3089 	.db 0x0a
      0002F0 20                    3090 	.ascii " "
      0002F1 0D                    3091 	.db 0x0d
      0002F2 20 42 75 66 66 65 72  3092 	.ascii " Buffer 0 created at :0X0%x"
             20 30 20 63 72 65 61
             74 65 64 20 61 74 20
             3A 30 58 30 25 78
      00030D 00                    3093 	.db 0x00
                                   3094 	.area CSEG    (CODE)
                                   3095 	.area CONST   (CODE)
      00030E                       3096 ___str_16:
      00030E 0A                    3097 	.db 0x0a
      00030F 0D                    3098 	.db 0x0d
      000310 4D 61 6C 6C 6F 63 20  3099 	.ascii "Malloc for Buffer 1 failed"
             66 6F 72 20 42 75 66
             66 65 72 20 31 20 66
             61 69 6C 65 64
      00032A 0A                    3100 	.db 0x0a
      00032B 0D                    3101 	.db 0x0d
      00032C 00                    3102 	.db 0x00
                                   3103 	.area CSEG    (CODE)
                                   3104 	.area CONST   (CODE)
      00032D                       3105 ___str_17:
      00032D 0A                    3106 	.db 0x0a
      00032E 20                    3107 	.ascii " "
      00032F 0D                    3108 	.db 0x0d
      000330 20 44 4D 41 20 66 6F  3109 	.ascii " DMA for Buffer 1  - malloc Successful"
             72 20 42 75 66 66 65
             72 20 31 20 20 2D 20
             6D 61 6C 6C 6F 63 20
             53 75 63 63 65 73 73
             66 75 6C
      000356 0A                    3110 	.db 0x0a
      000357 20                    3111 	.ascii " "
      000358 0D                    3112 	.db 0x0d
      000359 20                    3113 	.ascii " "
      00035A 00                    3114 	.db 0x00
                                   3115 	.area CSEG    (CODE)
                                   3116 	.area CONST   (CODE)
      00035B                       3117 ___str_18:
      00035B 0A                    3118 	.db 0x0a
      00035C 20                    3119 	.ascii " "
      00035D 0D                    3120 	.db 0x0d
      00035E 20 42 75 66 66 65 72  3121 	.ascii " Buffer 1 created at : :0X0%x "
             20 31 20 63 72 65 61
             74 65 64 20 61 74 20
             3A 20 3A 30 58 30 25
             78 20
      00037C 0A                    3122 	.db 0x0a
      00037D 20                    3123 	.ascii " "
      00037E 0D                    3124 	.db 0x0d
      00037F 20                    3125 	.ascii " "
      000380 00                    3126 	.db 0x00
                                   3127 	.area CSEG    (CODE)
                                   3128 	.area CONST   (CODE)
      000381                       3129 ___str_19:
      000381 0A                    3130 	.db 0x0a
      000382 20                    3131 	.ascii " "
      000383 0D                    3132 	.db 0x0d
      000384 20 4D 61 6C 6C 6F 63  3133 	.ascii " Malloc for Buffer 1 failed, Please re-enter value"
             20 66 6F 72 20 42 75
             66 66 65 72 20 31 20
             66 61 69 6C 65 64 2C
             20 50 6C 65 61 73 65
             20 72 65 2D 65 6E 74
             65 72 20 76 61 6C 75
             65
      0003B6 00                    3134 	.db 0x00
                                   3135 	.area CSEG    (CODE)
                                   3136 	.area CONST   (CODE)
      0003B7                       3137 ___str_20:
      0003B7 0A                    3138 	.db 0x0a
      0003B8 20                    3139 	.ascii " "
      0003B9 0D                    3140 	.db 0x0d
      0003BA 20 50 72 65 73 73 20  3141 	.ascii " Press '*' - for help - instruction for command and char inp"
             27 2A 27 20 2D 20 66
             6F 72 20 68 65 6C 70
             20 2D 20 69 6E 73 74
             72 75 63 74 69 6F 6E
             20 66 6F 72 20 63 6F
             6D 6D 61 6E 64 20 61
             6E 64 20 63 68 61 72
             20 69 6E 70
      0003F6 75 74                 3142 	.ascii "ut"
      0003F8 00                    3143 	.db 0x00
                                   3144 	.area CSEG    (CODE)
                                   3145 	.area CONST   (CODE)
      0003F9                       3146 ___str_21:
      0003F9 0A                    3147 	.db 0x0a
      0003FA 20                    3148 	.ascii " "
      0003FB 0D                    3149 	.db 0x0d
      0003FC 20 45 6E 74 65 72 20  3150 	.ascii " Enter character : "
             63 68 61 72 61 63 74
             65 72 20 3A 20
      00040F 09                    3151 	.db 0x09
      000410 00                    3152 	.db 0x00
                                   3153 	.area CSEG    (CODE)
                                   3154 	.area CONST   (CODE)
      000411                       3155 ___str_22:
      000411 0A                    3156 	.db 0x0a
      000412 20                    3157 	.ascii " "
      000413 0D                    3158 	.db 0x0d
      000414 20 54 6F 74 61 6C 20  3159 	.ascii " Total rx bytes = %d"
             72 78 20 62 79 74 65
             73 20 3D 20 25 64
      000428 09                    3160 	.db 0x09
      000429 00                    3161 	.db 0x00
                                   3162 	.area CSEG    (CODE)
                                   3163 	.area CONST   (CODE)
      00042A                       3164 ___str_23:
      00042A 4E 6F 2E 20 53 74 6F  3165 	.ascii "No. Stored B = %d "
             72 65 64 20 42 20 3D
             20 25 64 20
      00043C 00                    3166 	.db 0x00
                                   3167 	.area CSEG    (CODE)
                                   3168 	.area CONST   (CODE)
      00043D                       3169 ___str_24:
      00043D 09                    3170 	.db 0x09
      00043E 27 25 63 27 20 2D 20  3171 	.ascii "'%c' - stored at %p"
             73 74 6F 72 65 64 20
             61 74 20 25 70
      000451 0A                    3172 	.db 0x0a
      000452 0D                    3173 	.db 0x0d
      000453 00                    3174 	.db 0x00
                                   3175 	.area CSEG    (CODE)
                                   3176 	.area CONST   (CODE)
      000454                       3177 ___str_25:
      000454 0A                    3178 	.db 0x0a
      000455 20                    3179 	.ascii " "
      000456 0D                    3180 	.db 0x0d
      000457 20 20 2D 2D 2D 2D 2D  3181 	.ascii "  --------- Instruction for command and character input:  "
             2D 2D 2D 2D 20 49 6E
             73 74 72 75 63 74 69
             6F 6E 20 66 6F 72 20
             63 6F 6D 6D 61 6E 64
             20 61 6E 64 20 63 68
             61 72 61 63 74 65 72
             20 69 6E 70 75 74 3A
             20 20
      000491 0A                    3182 	.db 0x0a
      000492 0D                    3183 	.db 0x0d
      000493 20 45 6E 74 65 72 20  3184 	.ascii " Enter "
      00049A 0A                    3185 	.db 0x0a
      00049B 0D                    3186 	.db 0x0d
      00049C 2D 2D 2D 2D 2D 2D 2D  3187 	.ascii "----------"
             2D 2D 2D
      0004A6 00                    3188 	.db 0x00
                                   3189 	.area CSEG    (CODE)
                                   3190 	.area CONST   (CODE)
      0004A7                       3191 ___str_26:
      0004A7 0A                    3192 	.db 0x0a
      0004A8 20                    3193 	.ascii " "
      0004A9 0D                    3194 	.db 0x0d
      0004AA 20 20 27 2B 27 20 3A  3195 	.ascii "  '+' : to Add a New Buffer:"
             20 74 6F 20 41 64 64
             20 61 20 4E 65 77 20
             42 75 66 66 65 72 3A
      0004C6 00                    3196 	.db 0x00
                                   3197 	.area CSEG    (CODE)
                                   3198 	.area CONST   (CODE)
      0004C7                       3199 ___str_27:
      0004C7 0A                    3200 	.db 0x0a
      0004C8 20                    3201 	.ascii " "
      0004C9 0D                    3202 	.db 0x0d
      0004CA 20 20 27 2D 27 20 3A  3203 	.ascii "  '-' : to Clean a Buffer:"
             20 74 6F 20 43 6C 65
             61 6E 20 61 20 42 75
             66 66 65 72 3A
      0004E4 00                    3204 	.db 0x00
                                   3205 	.area CSEG    (CODE)
                                   3206 	.area CONST   (CODE)
      0004E5                       3207 ___str_28:
      0004E5 0A                    3208 	.db 0x0a
      0004E6 20                    3209 	.ascii " "
      0004E7 0D                    3210 	.db 0x0d
      0004E8 20 20 27 3F 27 20 3A  3211 	.ascii "  '?' : to Display a Detailed Heap Report:"
             20 74 6F 20 44 69 73
             70 6C 61 79 20 61 20
             44 65 74 61 69 6C 65
             64 20 48 65 61 70 20
             52 65 70 6F 72 74 3A
      000512 00                    3212 	.db 0x00
                                   3213 	.area CSEG    (CODE)
                                   3214 	.area CONST   (CODE)
      000513                       3215 ___str_29:
      000513 0A                    3216 	.db 0x0a
      000514 20                    3217 	.ascii " "
      000515 0D                    3218 	.db 0x0d
      000516 20 20 27 40 27 20 3A  3219 	.ascii "  '@' : to Clear all Buffers Data and Start Again:"
             20 74 6F 20 43 6C 65
             61 72 20 61 6C 6C 20
             42 75 66 66 65 72 73
             20 44 61 74 61 20 61
             6E 64 20 53 74 61 72
             74 20 41 67 61 69 6E
             3A
      000548 00                    3220 	.db 0x00
                                   3221 	.area CSEG    (CODE)
                                   3222 	.area CONST   (CODE)
      000549                       3223 ___str_30:
      000549 0A                    3224 	.db 0x0a
      00054A 20                    3225 	.ascii " "
      00054B 0D                    3226 	.db 0x0d
      00054C 20 20 27 3D 27 20 3A  3227 	.ascii "  '=' : to Data printing of buffer"
             20 74 6F 20 44 61 74
             61 20 70 72 69 6E 74
             69 6E 67 20 6F 66 20
             62 75 66 66 65 72
      00056E 00                    3228 	.db 0x00
                                   3229 	.area CSEG    (CODE)
                                   3230 	.area CONST   (CODE)
      00056F                       3231 ___str_31:
      00056F 0A                    3232 	.db 0x0a
      000570 20                    3233 	.ascii " "
      000571 0D                    3234 	.db 0x0d
      000572 20 20 73 6D 61 6C 6C  3235 	.ascii "  small 'a'-'z' : for char i/p - to Store these Characters i"
             20 27 61 27 2D 27 7A
             27 20 3A 20 66 6F 72
             20 63 68 61 72 20 69
             2F 70 20 2D 20 74 6F
             20 53 74 6F 72 65 20
             74 68 65 73 65 20 43
             68 61 72 61 63 74 65
             72 73 20 69
      0005AE 6E 20 42 75 66 66 65  3236 	.ascii "n Buffer 0:"
             72 20 30 3A
      0005B9 00                    3237 	.db 0x00
                                   3238 	.area CSEG    (CODE)
                                   3239 	.area CONST   (CODE)
      0005BA                       3240 ___str_32:
      0005BA 0A                    3241 	.db 0x0a
      0005BB 0D                    3242 	.db 0x0d
      0005BC 20 2D 2D 2D 2D 2D 2D  3243 	.ascii " -----------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0005F8 2D 2D 2D 2D 2D 2D 2D  3244 	.ascii "----------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D
      000608 0A                    3245 	.db 0x0a
      000609 0D                    3246 	.db 0x0d
      00060A 20                    3247 	.ascii " "
      00060B 00                    3248 	.db 0x00
                                   3249 	.area CSEG    (CODE)
                                   3250 	.area CONST   (CODE)
      00060C                       3251 ___str_33:
      00060C 0A                    3252 	.db 0x0a
      00060D 0D                    3253 	.db 0x0d
      00060E 20 20 20 54 6F 20 63  3254 	.ascii "   To create new buffer, "
             72 65 61 74 65 20 6E
             65 77 20 62 75 66 66
             65 72 2C 20
      000627 0A                    3255 	.db 0x0a
      000628 0D                    3256 	.db 0x0d
      000629 20 45 6E 74 65 72 20  3257 	.ascii " Enter buffer size between 30 to 300 bytes"
             62 75 66 66 65 72 20
             73 69 7A 65 20 62 65
             74 77 65 65 6E 20 33
             30 20 74 6F 20 33 30
             30 20 62 79 74 65 73
      000653 09                    3258 	.db 0x09
      000654 3A                    3259 	.ascii ":"
      000655 00                    3260 	.db 0x00
                                   3261 	.area CSEG    (CODE)
                                   3262 	.area CONST   (CODE)
      000656                       3263 ___str_34:
      000656 0A                    3264 	.db 0x0a
      000657 0D                    3265 	.db 0x0d
      000658 20 20 6D 61 6C 6C 6F  3266 	.ascii "  malloc successful for buffer[%d]"
             63 20 73 75 63 63 65
             73 73 66 75 6C 20 66
             6F 72 20 62 75 66 66
             65 72 5B 25 64 5D
      00067A 00                    3267 	.db 0x00
                                   3268 	.area CSEG    (CODE)
                                   3269 	.area CONST   (CODE)
      00067B                       3270 ___str_35:
      00067B 0A                    3271 	.db 0x0a
      00067C 0D                    3272 	.db 0x0d
      00067D 20 20 20 41 64 64 72  3273 	.ascii "   Address of buffer[%d]: %p"
             65 73 73 20 6F 66 20
             62 75 66 66 65 72 5B
             25 64 5D 3A 20 25 70
      000699 00                    3274 	.db 0x00
                                   3275 	.area CSEG    (CODE)
                                   3276 	.area CONST   (CODE)
      00069A                       3277 ___str_36:
      00069A 0A                    3278 	.db 0x0a
      00069B 0D                    3279 	.db 0x0d
      00069C 20 20 20 45 6E 74 65  3280 	.ascii "   Enter buffer number you want to clear."
             72 20 62 75 66 66 65
             72 20 6E 75 6D 62 65
             72 20 79 6F 75 20 77
             61 6E 74 20 74 6F 20
             63 6C 65 61 72 2E
      0006C5 00                    3281 	.db 0x00
                                   3282 	.area CSEG    (CODE)
                                   3283 	.area CONST   (CODE)
      0006C6                       3284 ___str_37:
      0006C6 0A                    3285 	.db 0x0a
      0006C7 0D                    3286 	.db 0x0d
      0006C8 20 20 42 75 66 66 65  3287 	.ascii "  Buffer %d Cleared"
             72 20 25 64 20 43 6C
             65 61 72 65 64
      0006DB 00                    3288 	.db 0x00
                                   3289 	.area CSEG    (CODE)
                                   3290 	.area CONST   (CODE)
      0006DC                       3291 ___str_38:
      0006DC 0A                    3292 	.db 0x0a
      0006DD 0D                    3293 	.db 0x0d
      0006DE 20 20 50 6C 65 61 73  3294 	.ascii "  Please enter correct buffer number,You have entered a wron"
             65 20 65 6E 74 65 72
             20 63 6F 72 72 65 63
             74 20 62 75 66 66 65
             72 20 6E 75 6D 62 65
             72 2C 59 6F 75 20 68
             61 76 65 20 65 6E 74
             65 72 65 64 20 61 20
             77 72 6F 6E
      00071A 67 20 42 75 66 66 65  3295 	.ascii "g Buffer number"
             72 20 6E 75 6D 62 65
             72
      000729 00                    3296 	.db 0x00
                                   3297 	.area CSEG    (CODE)
                                   3298 	.area CONST   (CODE)
      00072A                       3299 ___str_39:
      00072A 0A                    3300 	.db 0x0a
      00072B 20                    3301 	.ascii " "
      00072C 0D                    3302 	.db 0x0d
      00072D 20 20 20 2D 2D 2D 2D  3303 	.ascii "   ------------       Heap Report     ----------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 20 20 20 20 20 20
             20 48 65 61 70 20 52
             65 70 6F 72 74 20 20
             20 20 20 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D
      000763 0A                    3304 	.db 0x0a
      000764 00                    3305 	.db 0x00
                                   3306 	.area CSEG    (CODE)
                                   3307 	.area CONST   (CODE)
      000765                       3308 ___str_40:
      000765 0A                    3309 	.db 0x0a
      000766 0D                    3310 	.db 0x0d
      000767 20 42 5F 4E 20 20 20  3311 	.ascii " B_N    : Buffer Number"
             20 3A 20 42 75 66 66
             65 72 20 4E 75 6D 62
             65 72
      00077E 00                    3312 	.db 0x00
                                   3313 	.area CSEG    (CODE)
                                   3314 	.area CONST   (CODE)
      00077F                       3315 ___str_41:
      00077F 0A                    3316 	.db 0x0a
      000780 0D                    3317 	.db 0x0d
      000781 20 53 74 5F 61 64 64  3318 	.ascii " St_addr: Buffer Start Address"
             72 3A 20 42 75 66 66
             65 72 20 53 74 61 72
             74 20 41 64 64 72 65
             73 73
      00079F 00                    3319 	.db 0x00
                                   3320 	.area CSEG    (CODE)
                                   3321 	.area CONST   (CODE)
      0007A0                       3322 ___str_42:
      0007A0 0A                    3323 	.db 0x0a
      0007A1 0D                    3324 	.db 0x0d
      0007A2 20 45 5F 41 64 64 72  3325 	.ascii " E_Addr : Buffer End Address"
             20 3A 20 42 75 66 66
             65 72 20 45 6E 64 20
             41 64 64 72 65 73 73
      0007BE 00                    3326 	.db 0x00
                                   3327 	.area CSEG    (CODE)
                                   3328 	.area CONST   (CODE)
      0007BF                       3329 ___str_43:
      0007BF 0A                    3330 	.db 0x0a
      0007C0 0D                    3331 	.db 0x0d
      0007C1 20 42 5F 53 69 7A 65  3332 	.ascii " B_Size : Allocated Buffer Size"
             20 3A 20 41 6C 6C 6F
             63 61 74 65 64 20 42
             75 66 66 65 72 20 53
             69 7A 65
      0007E0 00                    3333 	.db 0x00
                                   3334 	.area CSEG    (CODE)
                                   3335 	.area CONST   (CODE)
      0007E1                       3336 ___str_44:
      0007E1 0A                    3337 	.db 0x0a
      0007E2 0D                    3338 	.db 0x0d
      0007E3 20 4E 5F 53 74 6F 43  3339 	.ascii " N_StoC : No. of Storage Chars in buffer"
             20 3A 20 4E 6F 2E 20
             6F 66 20 53 74 6F 72
             61 67 65 20 43 68 61
             72 73 20 69 6E 20 62
             75 66 66 65 72
      00080B 00                    3340 	.db 0x00
                                   3341 	.area CSEG    (CODE)
                                   3342 	.area CONST   (CODE)
      00080C                       3343 ___str_45:
      00080C 0A                    3344 	.db 0x0a
      00080D 0D                    3345 	.db 0x0d
      00080E 20 4E 5F 46 53 70 61  3346 	.ascii " N_FSpace: No. Free Space in buffer"
             63 65 3A 20 4E 6F 2E
             20 46 72 65 65 20 53
             70 61 63 65 20 69 6E
             20 62 75 66 66 65 72
      000831 0A                    3347 	.db 0x0a
      000832 0D                    3348 	.db 0x0d
      000833 00                    3349 	.db 0x00
                                   3350 	.area CSEG    (CODE)
                                   3351 	.area CONST   (CODE)
      000834                       3352 ___str_46:
      000834 0A                    3353 	.db 0x0a
      000835 0D                    3354 	.db 0x0d
      000836 20 42 5F 4E 20        3355 	.ascii " B_N "
      00083B 09                    3356 	.db 0x09
      00083C 20 53 74 5F 61 64 64  3357 	.ascii " St_addr  E_Addr  B_Size  N_StoC  N_FSpace "
             72 20 20 45 5F 41 64
             64 72 20 20 42 5F 53
             69 7A 65 20 20 4E 5F
             53 74 6F 43 20 20 4E
             5F 46 53 70 61 63 65
             20
      000867 0A                    3358 	.db 0x0a
      000868 0D                    3359 	.db 0x0d
      000869 00                    3360 	.db 0x00
                                   3361 	.area CSEG    (CODE)
                                   3362 	.area CONST   (CODE)
      00086A                       3363 ___str_47:
      00086A 0A                    3364 	.db 0x0a
      00086B 0D                    3365 	.db 0x0d
      00086C 20 25 64              3366 	.ascii " %d"
      00086F 09                    3367 	.db 0x09
      000870 20 30 78 30 25 78     3368 	.ascii " 0x0%x"
      000876 09                    3369 	.db 0x09
      000877 20 30 78 30 25 78     3370 	.ascii " 0x0%x"
      00087D 09                    3371 	.db 0x09
      00087E 20 20 25 64           3372 	.ascii "  %d"
      000882 09                    3373 	.db 0x09
      000883 20 20 25 64           3374 	.ascii "  %d"
      000887 09                    3375 	.db 0x09
      000888 09                    3376 	.db 0x09
      000889 20 25 64              3377 	.ascii " %d"
      00088C 0A                    3378 	.db 0x0a
      00088D 0D                    3379 	.db 0x0d
      00088E 00                    3380 	.db 0x00
                                   3381 	.area CSEG    (CODE)
                                   3382 	.area CONST   (CODE)
      00088F                       3383 ___str_48:
      00088F 0A                    3384 	.db 0x0a
      000890 0D                    3385 	.db 0x0d
      000891 20 20 4E 75 6D 62 65  3386 	.ascii "  Number of storage characters currently in buffer 0 --> %d "
             72 20 6F 66 20 73 74
             6F 72 61 67 65 20 63
             68 61 72 61 63 74 65
             72 73 20 63 75 72 72
             65 6E 74 6C 79 20 69
             6E 20 62 75 66 66 65
             72 20 30 20 2D 2D 3E
             20 25 64 20
      0008CD 0A                    3387 	.db 0x0a
      0008CE 20                    3388 	.ascii " "
      0008CF 0D                    3389 	.db 0x0d
      0008D0 20 20                 3390 	.ascii "  "
      0008D2 00                    3391 	.db 0x00
                                   3392 	.area CSEG    (CODE)
                                   3393 	.area CONST   (CODE)
      0008D3                       3394 ___str_49:
      0008D3 0A                    3395 	.db 0x0a
      0008D4 0D                    3396 	.db 0x0d
      0008D5 20 20 44 61 74 61 20  3397 	.ascii "  Data in Buffer 0: "
             69 6E 20 42 75 66 66
             65 72 20 30 3A 20
      0008E9 09                    3398 	.db 0x09
      0008EA 00                    3399 	.db 0x00
                                   3400 	.area CSEG    (CODE)
                                   3401 	.area CONST   (CODE)
      0008EB                       3402 ___str_50:
      0008EB 0A                    3403 	.db 0x0a
      0008EC 0D                    3404 	.db 0x0d
      0008ED 00                    3405 	.db 0x00
                                   3406 	.area CSEG    (CODE)
                                   3407 	.area CONST   (CODE)
      0008EE                       3408 ___str_51:
      0008EE 25 63 20 20           3409 	.ascii "%c  "
      0008F2 00                    3410 	.db 0x00
                                   3411 	.area CSEG    (CODE)
                                   3412 	.area CONST   (CODE)
      0008F3                       3413 ___str_52:
      0008F3 0A                    3414 	.db 0x0a
      0008F4 20                    3415 	.ascii " "
      0008F5 0D                    3416 	.db 0x0d
      0008F6 20 20 20 2D 2D 2D 2D  3417 	.ascii "   -----------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
      00092E 0A                    3418 	.db 0x0a
      00092F 0D                    3419 	.db 0x0d
      000930 00                    3420 	.db 0x00
                                   3421 	.area CSEG    (CODE)
                                   3422 	.area CONST   (CODE)
      000931                       3423 ___str_53:
      000931 0A                    3424 	.db 0x0a
      000932 0D                    3425 	.db 0x0d
      000933 20 20 20 2D 2D 2D 2D  3426 	.ascii "   -------------- Displaying current content of buffer_0 ---"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 20 44 69 73
             70 6C 61 79 69 6E 67
             20 63 75 72 72 65 6E
             74 20 63 6F 6E 74 65
             6E 74 20 6F 66 20 62
             75 66 66 65 72 5F 30
             20 2D 2D 2D
      00096F 2D 2D 2D 2D 2D 2D 2D  3427 	.ascii "-----------"
             2D 2D 2D 2D
      00097A 0A                    3428 	.db 0x0a
      00097B 0D                    3429 	.db 0x0d
      00097C 00                    3430 	.db 0x00
                                   3431 	.area CSEG    (CODE)
                                   3432 	.area CONST   (CODE)
      00097D                       3433 ___str_54:
      00097D 0A                    3434 	.db 0x0a
      00097E 0D                    3435 	.db 0x0d
      00097F 20 42 75 66 66 65 72  3436 	.ascii " Buffer 0 is empty:"
             20 30 20 69 73 20 65
             6D 70 74 79 3A
      000992 0A                    3437 	.db 0x0a
      000993 0D                    3438 	.db 0x0d
      000994 00                    3439 	.db 0x00
                                   3440 	.area CSEG    (CODE)
                                   3441 	.area CONST   (CODE)
      000995                       3442 ___str_55:
      000995 0A                    3443 	.db 0x0a
      000996 0D                    3444 	.db 0x0d
      000997 20 20 20 25 70 20 3A  3445 	.ascii "   %p :"
      00099E 00                    3446 	.db 0x00
                                   3447 	.area CSEG    (CODE)
                                   3448 	.area CONST   (CODE)
      00099F                       3449 ___str_56:
      00099F 25 78 20              3450 	.ascii "%x "
      0009A2 00                    3451 	.db 0x00
                                   3452 	.area CSEG    (CODE)
                                   3453 	.area CONST   (CODE)
      0009A3                       3454 ___str_57:
      0009A3 0A                    3455 	.db 0x0a
      0009A4 0D                    3456 	.db 0x0d
      0009A5 20 2D 2D 2D 2D 2D 2D  3457 	.ascii " -------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D
      0009D7 0A                    3458 	.db 0x0a
      0009D8 0D                    3459 	.db 0x0d
      0009D9 00                    3460 	.db 0x00
                                   3461 	.area CSEG    (CODE)
                                   3462 	.area CONST   (CODE)
      0009DA                       3463 ___str_58:
      0009DA 0A                    3464 	.db 0x0a
      0009DB 20                    3465 	.ascii " "
      0009DC 0D                    3466 	.db 0x0d
      0009DD 20 20 20 42 75 66 66  3467 	.ascii "   Buffer %d Cleared "
             65 72 20 25 64 20 43
             6C 65 61 72 65 64 20
      0009F2 0A                    3468 	.db 0x0a
      0009F3 00                    3469 	.db 0x00
                                   3470 	.area CSEG    (CODE)
                                   3471 	.area CONST   (CODE)
      0009F4                       3472 ___str_59:
      0009F4 0A                    3473 	.db 0x0a
      0009F5 20                    3474 	.ascii " "
      0009F6 0D                    3475 	.db 0x0d
      0009F7 20 2D 2D 2D 2D 2D 2D  3476 	.ascii " ----------------All Buffers Cleared------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 41 6C 6C 20
             42 75 66 66 65 72 73
             20 43 6C 65 61 72 65
             64 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000A33 2D 2D                 3477 	.ascii "--"
      000A35 00                    3478 	.db 0x00
                                   3479 	.area CSEG    (CODE)
                                   3480 	.area CONST   (CODE)
      000A36                       3481 ___str_60:
      000A36 0A                    3482 	.db 0x0a
      000A37 20                    3483 	.ascii " "
      000A38 0D                    3484 	.db 0x0d
      000A39 20 2D 2D 2D 2D 2D 2D  3485 	.ascii " -----------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000A75 2D 2D                 3486 	.ascii "--"
      000A77 00                    3487 	.db 0x00
                                   3488 	.area CSEG    (CODE)
                                   3489 	.area CONST   (CODE)
      000A78                       3490 ___str_61:
      000A78 0A                    3491 	.db 0x0a
      000A79 20                    3492 	.ascii " "
      000A7A 0D                    3493 	.db 0x0d
      000A7B 20 21 21 21 21 21 2D  3494 	.ascii " !!!!!---------Invalid command or char i/p-----------!!!!!"
             2D 2D 2D 2D 2D 2D 2D
             2D 49 6E 76 61 6C 69
             64 20 63 6F 6D 6D 61
             6E 64 20 6F 72 20 63
             68 61 72 20 69 2F 70
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 21 21 21
             21 21
      000AB5 00                    3495 	.db 0x00
                                   3496 	.area CSEG    (CODE)
                                   3497 	.area CONST   (CODE)
      000AB6                       3498 ___str_62:
      000AB6 0A                    3499 	.db 0x0a
      000AB7 20                    3500 	.ascii " "
      000AB8 0D                    3501 	.db 0x0d
      000AB9 20 2D 2D 2D 2D 2D 2D  3502 	.ascii " -------------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
      000AF1 0A                    3503 	.db 0x0a
      000AF2 0D                    3504 	.db 0x0d
      000AF3 00                    3505 	.db 0x00
                                   3506 	.area CSEG    (CODE)
                                   3507 	.area XINIT   (CODE)
      000000                       3508 __xinit__ptr:
      000000 00 00                 3509 	.byte #0x00,#0x00
                                   3510 	.area CABS    (ABS,CODE)
